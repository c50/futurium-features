<?php
/**
 * @file
 * Code for the flavors feature.
 */

include_once 'supertags.features.inc';

/**
 * Implements hook_permission().
 */
function supertags_permission() {
  $perms = array(
    'administer supertags' => array(
      'title' => t('Administer supertags'),
      'description' => t('See inactive flavor pages.'),
    ),
    'edit supertags fields' => array(
      'title' => t('Edit supertags fields'),
      'description' => t('Grants rights to see and edit fields belonging to supertags (Default flavor, Flavors).'),
    ),
  );
  $vocab = taxonomy_vocabulary_machine_name_load('flavors');
  if (!empty($vocab)) {
    $tree = taxonomy_get_tree($vocab->vid, 0, NULL, TRUE);
    foreach ($tree as $key => $value) {
      $perms['manage ' . $value->name . ' flavor'] = array(
        'title' => 'Manage ' . $value->name . ' flavour',
        'description' => 'Manage settings for ' . $value->name . ' flavour.',
      );
    }
  }
  return $perms;
}

/**
 * Implements hook_menu().
 */
function supertags_menu() {

  $items = array();
  $vocab = taxonomy_vocabulary_machine_name_load('flavors');

  // Create home landing page.
  $items['home'] = array(
    'title' => "Futurium",
    'access callback' => array(TRUE),
    'page callback' => '_supertags_flavor_page',
    'page arguments' => array(0),
    'type' => MENU_NORMAL_ITEM,
  );

  $contexts = db_select("context", "c")
    ->fields('c', array('name'))
    ->execute()
    ->fetchAllAssoc('name');

  $node_types = node_type_get_types();

  $items['dashboard'] = array(
    'title' => 'Dashboard',
    'page callback' => '_supertags_dashboard_main_page',
    'access callback' => '_supertags_flavor_pages_access',
    'access arguments' => array(NULL, 'dashboard-main'),
    'weight' => 1000,
    'menu_name' => 'user-menu',
    'type' => MENU_NORMAL_ITEM,
  );

  $tree = taxonomy_get_tree($vocab->vid, 0, NULL, TRUE);
  if (!empty($tree)) {
    foreach ($tree as $key => $value) {
      $flavor_path = _supertags_term_path($value);

      // Create a flavor context.
      _supertags_create_context($contexts, $value->name, $flavor_path);
      // Create a menu per flavor.
      _supertags_create_menu($value->name, $flavor_path);

      // Create flavor landing page.
      $items[$flavor_path] = array(
        'title' => $value->name,
        'access callback' => '_supertags_flavor_pages_access',
        'access arguments' => array($value),
        'page callback' => '_supertags_flavor_page',
        'page arguments' => array(0),
        'type' => MENU_NORMAL_ITEM,
      );

      // Create a special users page.
      $items[$flavor_path . '/people'] = array(
        'title' => 'People',
        'access callback' => '_supertags_flavor_pages_access',
        'access arguments' => array($value, 'people'),
        'page callback' => '_supertags_flavor_user_page',
        'page arguments' => array(0),
        'menu_name' => $flavor_path . '-menu',
        'weight' => 100,
        'type' => MENU_NORMAL_ITEM,
      );

      $items[$flavor_path . '/dashboard'] = array(
        'title' => 'Manage ' . $value->name,
        'page callback' => '_supertags_dashboard_content_page',
        'page arguments' => array($value),
        'access callback' => '_supertags_flavor_pages_access',
        'access arguments' => array($value, 'dashboard'),
        'weight' => 1000,
        'type' => MENU_NORMAL_ITEM,
      );

      $items[$flavor_path . '/dashboard/content'] = array(
        'title' => 'Content',
        'page callback' => '_supertags_dashboard_content_page',
        'page arguments' => array($value),
        'access callback' => '_supertags_flavor_pages_access',
        'access arguments' => array($value, 'dashboard'),
        'weight' => 1,
        'type' => MENU_DEFAULT_LOCAL_TASK,
      );

      $items[$flavor_path . '/dashboard/comments'] = array(
        'title' => 'Comments',
        'page callback' => '_supertags_dashboard_comments_page',
        'page arguments' => array($value),
        'access callback' => '_supertags_flavor_pages_access',
        'access arguments' => array($value, 'dashboard'),
        'weight' => 2,
        'type' => MENU_LOCAL_TASK,
      );

      $items[$flavor_path . '/dashboard/people'] = array(
        'title' => 'Users',
        'page callback' => '_supertags_dashboard_users_page',
        'page arguments' => array($value),
        'access callback' => '_supertags_flavor_pages_access',
        'access arguments' => array($value, 'dashboard'),
        'weight' => 3,
        'type' => MENU_LOCAL_TASK,
      );

      $items[$flavor_path . '/dashboard/blocks'] = array(
        'title' => 'Blocks',
        'page callback' => '_supertags_dashboard_blocks_page',
        'page arguments' => array($value),
        'access callback' => '_supertags_flavor_pages_access',
        'access arguments' => array($value, 'dashboard'),
        'weight' => 4,
        'type' => MENU_LOCAL_TASK,
      );

      $items[$flavor_path . '/dashboard/settings'] = array(
        'title' => 'Settings',
        'page callback' => '_supertags_dashboard_settings_page',
        'page arguments' => array($value),
        'access callback' => '_supertags_flavor_pages_access',
        'access arguments' => array($value, 'dashboard'),
        'weight' => 5,
        'type' => MENU_LOCAL_TASK,
      );

      $items[$flavor_path . '/add'] = array(
        'title' => 'Add content',
        'page callback' => 'node_add_page',
        'access callback' => '_node_add_access',
        'file path' => drupal_get_path('module', 'node'),
        'file' => 'node.pages.inc',
        'menu_name' => 'navigation',
      );

      $default_settings = _supertags_content_type_mapping($value->tid);
      foreach ($default_settings as $machine_name => $settings) {
        if ($settings['enabled']) {

          $content_type_object = $node_types[$machine_name];

          $type_url_str = str_replace('_', '-', $machine_name);

          $items[$flavor_path . '/add/' . $type_url_str] = array(
            'title' => $settings['label'],
            'title callback' => 'check_plain',
            'page callback' => 'node_add',
            'page arguments' => array($machine_name),
            'access callback' => 'node_access',
            'access arguments' => array('create', $machine_name),
            'description' => $content_type_object->description,
            'file path' => drupal_get_path('module', 'node'),
            'file' => 'node.pages.inc',
          );

          $items[$flavor_path . '/' . $settings['path']] = array(
            'title' => $settings['label_plural'],
            'access callback' => '_supertags_flavor_pages_access',
            'access arguments' => array($value),
            'page callback' => '_supertags_flavor_page',
            'page arguments' => array(0, 1, 2),
            'menu_name' => $flavor_path . '-menu',
            'weight' => $settings['weight'],
            'type' => MENU_NORMAL_ITEM,
          );
        }
      }
    }
  }

  // Autocomplete to search terms belonging to a tree only.
  $items['supertags/flavor_autocomplete/%'] = array(
    'title' => 'Autocomplete for supertags flavor',
    'page callback' => '_supertags_autocomplete',
    'access callback' => TRUE,
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  );

  $items['admin/supertags'] = array(
    'title' => 'Administer supertags',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
  );

  $items['admin/config/development/supertags'] = array(
    'title' => 'Supertags settings',
    'description' => 'Supertags settings and administration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_supertags_administration'),
    'access arguments' => array('administer supertags'),
  );

  return $items;

}

/**
 * Implements hook_admin_paths().
 */
function supertags_admin_paths() {
  $paths = array();
  $vocab = taxonomy_vocabulary_machine_name_load('flavors');
  if (!empty($vocab)) {
    $tree = taxonomy_get_tree($vocab->vid, 0, NULL, TRUE);
    foreach ($tree as $key => $value) {
      $path = _supertags_term_path($value);
      $paths[$path . '/dashboard'] = TRUE;
      $paths[$path . '/dashboard/*'] = TRUE;
    }
  }
  return $paths;
}

/**
 * Page callback for dashboard main page.
 */
function _supertags_dashboard_main_page() {
  $count = 0;
  $perms['super_admin'] = user_access('administer supertags');

  $vocab = taxonomy_vocabulary_machine_name_load('flavors');
  $tree = taxonomy_get_tree($vocab->vid, 0, NULL, TRUE);
  foreach ($tree as $key => $value) {
    $perms['manage ' . $value->name . ' flavor'] = user_access('manage ' . $value->name . ' flavor');
  }

  $markup = '<div class="flavour-boxes"><ul>';
  foreach ($tree as $k => $flavor) {
    if ($perms['super_admin'] || $perms['manage ' . $flavor->name . ' flavor']) {
      $class = _supertags_term_class($flavor);
      global $base_url;
      $path = _supertags_term_path($flavor) . '/dashboard';

      $markup .= '<li class="flavour-box flavour-' . $class . '">';
      $l_options = array(
        'attributes' => array(
          'class' => "flavour-link-" . $class,
        ),
        'html' => TRUE,
      );

      $link_label  = '<h2>' . $flavor->name . '</h2>';
      $link_label .= '<div>Manage ' . $flavor->name . '</div>';

      $markup .= l($link_label, $path, $l_options);
      $markup .= '</li>';
      $count++;
    }
  }
  $markup .= '</ul></div>';
  if ($count == 1) {
    drupal_goto($path);
  }
  return $markup;
}

/**
 * Page callback for dashboard user pages.
 */
function _supertags_dashboard_users_page($flavor) {
  drupal_set_title($flavor->name . " users");
  $markup = "";
  $markup .= views_embed_view('flavors_people', 'block_dashboard');
  return $markup;
}

/**
 * Page callback for flavor dashboard.
 */
function _supertags_dashboard_settings_page($flavor) {
  drupal_set_title($flavor->name . " settings");
  $markup = "";
  $context = _supertags_get_context();

  $forms[] = drupal_get_form('supertags_social_form', $context['flavor']['term']);

  foreach ($forms as $key => $form) {
    $markup .= render($form);
  }

  return $markup;
}

/**
 * Page callback for flavor dashboard.
 */
function _supertags_dashboard_content_page($flavor) {
  drupal_set_title($flavor->name . " content");

  $flavor_path = _supertags_term_path($flavor);
  $markup = l(t('+ Add content'), $flavor_path . '/add');

  $markup .= views_embed_view('flavors_admin_content', 'block');
  return $markup;
}

/**
 * Page callback for flavor dashboard.
 */
function _supertags_dashboard_comments_page($flavor) {
  drupal_set_title($flavor->name . " comments");

  $markup = views_embed_view('flavors_admin_comments', 'block');
  return $markup;
}

/**
 * Page callback for flavor dashboard.
 */
function _supertags_dashboard_blocks_page($flavor) {
  drupal_set_title($flavor->name . " blocks");

  $flavor_path = _supertags_term_path($flavor);
  $l_options = array(
    'query' => array(
      'flavour' => $flavor_path,
    ),
  );

  $markup = l(t('+ Add block'), 'block/add/user-blocks', $l_options);
  $markup .= '<br><br>';
  $markup .= views_embed_view('flavors_admin_blocks', 'block');
  return $markup;
}

/**
 * Dashboard form for social links.
 */
function supertags_social_form($form, $form_state, $flavor = NULL) {
  $flavor_path = _supertags_term_path($flavor);

  $form['tid'] = array(
    '#type' => 'hidden',
    '#value' => $flavor->tid,
  );

  $defaults = unserialize(variable_get('social_links_' . $flavor->tid));

  $form['tabs'] = array(
    '#type'     => 'horizontal_tabs',
    '#default_tab' => 'edit-settings',
    '#attached' => array(
      'library' => array(
        array(
          'field_group',
          'horizontal-tabs',
        ),
      ),
    ),
  );

  $form['settings'] = array(
    '#title' => 'Settings',
    '#type' => 'fieldset',
    '#group' => 'tabs',
    '#collapsible' => TRUE,
    '#tree' => TRUE,
  );

  $form['settings']['intro'] = array(
    '#title' => 'Description',
    '#type' => 'textarea',
    '#default_value' => $flavor->description,
    '#description' => 'The text that appears in the homepage block.',
  );

  $form['settings']['save'] = array(
    '#value' => 'Save',
    '#type' => 'submit',
  );

  $form['settings']['end'] = array(
    '#markup' => '<br><br>',
  );

  $form['social'] = array(
    '#title' => 'Social media',
    '#type' => 'fieldset',
    '#group' => 'tabs',
    '#collapsible' => TRUE,
    '#tree' => TRUE,
  );

  $form['social']['facebook'] = array(
    '#title' => 'Facebook',
    '#type' => 'textfield',
    '#default_value' => isset($defaults['facebook']) ? $defaults['facebook'] : '',
    '#attributes' => array(
      'placeholder' => 'URL of a Facebook page',
    ),
  );

  $form['social']['pinterest'] = array(
    '#title' => 'Pinterest',
    '#type' => 'textfield',
    '#default_value' => isset($defaults['pinterest']) ? $defaults['pinterest'] : '',
    '#attributes' => array(
      'placeholder' => 'URL of a Pinterest page',
    ),
  );

  $form['social']['linkedin'] = array(
    '#title' => 'LinkedIn',
    '#type' => 'textfield',
    '#default_value' => isset($defaults['linkedin']) ? $defaults['linkedin'] : '',
    '#attributes' => array(
      'placeholder' => 'URL of a LinkedIn page',
    ),
  );

  $form['social']['youtube'] = array(
    '#title' => 'YouTube',
    '#type' => 'textfield',
    '#default_value' => isset($defaults['youtube']) ? $defaults['youtube'] : '',
    '#attributes' => array(
      'placeholder' => 'URL of a Youtube page',
    ),
  );

  $form['social']['twitter'] = array(
    '#title' => 'Twitter',
    '#type' => 'textfield',
    '#default_value' => isset($defaults['twitter']) ? $defaults['twitter'] : '',
    '#attributes' => array(
      'placeholder' => 'URL of a Twitter page',
    ),
  );

  $new_widget = 'https://twitter.com/settings/widgets/new';
  $widget_list = 'https://twitter.com/settings/widgets';

  $form['social']['twitter_widget'] = array(
    '#title' => 'Twitter Widget',
    '#type' => 'textarea',
    '#default_value' => isset($defaults['twitter_widget']) ? $defaults['twitter_widget'] : '',
    '#description' => 'Get a widget from <a target="_blank" href="' . $widget_list . '">your widgets</a> or <a target="_blank" href="' . $new_widget . '">create a new one</a> and paste the widget code here.',
  );

  $form['social']['submit'] = array(
    '#value' => 'Save',
    '#type' => 'submit',
  );

  $form['social']['end'] = array(
    '#markup' => '<br><br>',
  );

  return $form;
}

/**
 * Submit handler for dashboard's social links form.
 */
function supertags_social_form_submit($form, $form_state) {
  $input = $form_state['input'];
  $tid = $input['tid'];

  if (!empty($input['settings']['intro'])) {
    $flavor = taxonomy_term_load($tid);
    $flavor->description = $input['settings']['intro'];
    taxonomy_term_save($flavor);
  }
  unset($form_state['values']['social']['submit']);
  $value = serialize($form_state['values']['social']);
  variable_set('social_links_' . $tid, $value);
}

/**
 * Implements hook_menu_alter().
 */
function supertags_menu_alter(&$items) {
  unset($items['taxonomy/term/%taxonomy_term']);
  unset($items['taxonomy/term/%taxonomy_term/view']);
  unset($items['taxonomy/term/%taxonomy_term/feed']);
}

/**
 * Implements hook_taxonomy_term_insert().
 */
function supertags_taxonomy_term_presave($term) {
  if (_supertags_is_flavor($term)) {
    $term->path['pathauto'] = 0;
  }
}

/**
 * Implements hook_taxonomy_term_insert().
 */
function supertags_taxonomy_term_insert($term) {
  _supertags_cache_update($term);
}

/**
 * Implements hook_taxonomy_term_update().
 */
function supertags_taxonomy_term_update($term) {
  _supertags_cache_update($term);
}

/**
 * Helper function for term_insert & term_update hooks.
 */
function _supertags_cache_update($term) {
  if (_supertags_is_flavor($term)) {
    $flavor_path = _supertags_term_path($term);

    $contexts = db_select("context", "c")
      ->fields('c', array('name'))
      ->execute()
      ->fetchAllAssoc('name');

    // Create a flavor context.
    _supertags_create_context($contexts, $term->name, $flavor_path);

    // Create a menu per flavor.
    _supertags_create_menu($term->name, $flavor_path);

    $cache = array();
    $cache = _supertags_build_tree($term);
    cache_set("term_" . $term->tid . "_tree", $cache);
  }
}

/**
 * Implements hook_taxonomy_term_load().
 */
function supertags_taxonomy_term_load($terms) {
  $flavors_vid  = taxonomy_vocabulary_machine_name_load('flavors')->vid;
  foreach ($terms as $k => $term) {
    if (_supertags_is_flavor($term)) {
      $cached_tree = cache_get("term_" . $term->tid . "_tree");

      if (empty($cached_tree)) {
        $cache = _supertags_build_tree($term);
        cache_set("term_" . $term->tid . "_tree", $cache);
        $terms[$k]->tree = $cache;
      }
      else {
        $terms[$k]->tree = $cached_tree->data;
      }
    }
  }
}

/**
 * Implements hook_taxonomy_term_load().
 */
function supertags_taxonomy_term_delete($term) {
  if (_supertags_is_flavor($term)) {
    $flavor_term_path = _supertags_term_path($term);

    $menu = menu_load($flavor_term_path . '-menu');
    $context = context_load($flavor_term_path);

    menu_delete($menu);
    context_delete($context);
  }
}

/**
 * Implements hook_block_info().
 */
function supertags_block_info() {
  $blocks['ctas'] = array(
    'info' => t('Call to action'),
  );
  $blocks['supertags'] = array(
    'info' => t('Supertags'),
  );
  $blocks['tag_cloud_tags'] = array(
    'info' => t('Tag Cloud Tags'),
  );
  $blocks['social_links'] = array(
    'info' => t('Contextualized social links'),
  );
  $blocks['twitter_feed'] = array(
    'info' => t('Contextualized twitter feed'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function supertags_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'ctas':
      $block['subject'] = _supertags_block_title($delta);
      $block['content'] = _supertags_ctas_block_content();
      break;

    case 'supertags':
      $block['subject'] = _supertags_block_title($delta);
      $block['content'] = _supertags_block_content();
      break;

    case 'tag_cloud_tags':
      $block['subject'] = _supertags_block_title($delta);
      $block['content'] = _supertags_non_supertags_block_content();
      break;

    case 'social_links':
      $flavor_context = _supertags_flavor_context();
      if (isset($flavor_context['term'])) {
        $flavor = $flavor_context['term'];
        $defaults = unserialize(variable_get('social_links_' . $flavor->tid));
        if (is_array($defaults)) {
          $twitter_feed = empty($defaults['twitter_widget']) ? '' : $defaults['twitter_widget'];
          unset($defaults['twitter_widget']);
          $social_links = array_filter($defaults);
        }
      }

      $block['subject'] = '';
      if (empty($social_links)) {
        $block['content'] = '';
      }
      else {
        $block['content'] = '<div class="socialLinks">';
        $block['content'] .= '<h3>Follow us:</h3>';
        $block['content'] .= '<ul>';
        foreach ($social_links as $key => $url) {
          switch ($key) {

            case 'facebook':
              $id = 'fb';
              $title = $flavor->name . ' on Facebook';
              break;

            case 'pinterest':
              $id = 'pi';
              $title = $flavor->name . ' on Pinterest';
              break;

            case 'linkedin':
              $id = 'li';
              $title = $flavor->name . ' on LinkedIn';
              break;

            case 'youtube':
              $id = 'yt';
              $title = $flavor->name . ' on Youtube';
              break;

            case 'twitter':
              $id = 'tw';
              $title = $flavor->name . ' on Twitter';
              break;

          }
          $block['content'] .= '<li><a rel="nofollow" id="' . $id . '" title="' . $title . '" href="' . $url . '"><span class="element-invisible">' . $title . '</span></a></li>';
        }
        $block['content'] .= '</ul>';
        $block['content'] .= '</div>';
      }
      break;

    case 'twitter_feed':
      $flavor_context = _supertags_flavor_context();
      if (isset($flavor_context['term'])) {
        $defaults = unserialize(variable_get('social_links_' . $flavor_context['term']->tid));
        $twitter_widget = empty($defaults['twitter_widget']) ? '' : $defaults['twitter_widget'];
      }
      $block['subject'] = '';
      $block['content'] = $twitter_widget;
      break;

  }
  return $block;
}

/**
 * Implements hook_theme().
 */
function supertags_theme($existing, $type, $theme, $path) {
  $themes['block__supertags__supertags'] = array(
    'variables' => array('block' => array()),
    'template' => 'block--supertags--supertags',
    'path' => $path . '/templates',
  );
  $themes['block__supertags__tag_cloud_tags'] = array(
    'variables' => array('block' => array()),
    'template' => 'block--supertags--supertags',
    'path' => $path . '/templates',
  );
  $themes['flavors_normal_page'] = array(
    'template' => 'page--flavors-normal-page',
    'render element' => 'page',
    'path' => $path . '/templates',
  );
  $themes['flavors_landing_page'] = array(
    'template' => 'page--flavors-landing-page',
    'render element' => 'page',
    'path' => $path . '/templates',
  );
  $themes['supertags_overrides_table_form_table'] = array(
    'render element' => 'form',
  );
  return $themes;
}

/**
 * Implements hook_context_page_condition().
 */
function supertags_context_page_condition() {
  $context = _supertags_get_context();
  if ($context['landing_page']) {
    if ($plugin = context_get_plugin('condition', 'flavor_landing_page_condition')) {
      $plugin->execute($context['flavor']);
    }
  }
  else {
    if ($plugin = context_get_plugin('condition', 'flavor_condition')) {
      $plugin->execute($context['flavor']);
    }
  }
}

/**
 * Implements hook_context_plugins().
 */
function supertags_context_plugins() {
  $plugins = array();
  $plugins['flavor_condition'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'supertags') . '/context',
      'file' => 'supertags_context_condition_flavor.inc',
      'class' => 'SupertagsFlavorCondition',
      'parent' => 'context_condition',
    ),
  );
  $plugins['flavor_landing_page_condition'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'supertags') . '/context',
      'file' => 'supertags_context_condition_flavor_landing_page.inc',
      'class' => 'SupertagsFlavorLandingPageCondition',
      'parent' => 'context_condition',
    ),
  );
  return $plugins;
}

/**
 * Implements hook_context_registry().
 */
function supertags_context_registry() {
  return array(
    'conditions' => array(
      'flavor_condition' => array(
        'title' => t('Flavor'),
        'description' => t('Set this context when this flavor is enabled.'),
        'plugin' => 'flavor_condition',
      ),
      'flavor_landing_page_condition' => array(
        'title' => t('Flavor Landing Page'),
        'description' => t('Set this context when viewing the selected flavor(s) landing page.'),
        'plugin' => 'flavor_landing_page_condition',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function supertags_field_formatter_info() {
  return array(
    'supertags_views_title_link' => array(
      'label' => t('Link to default flavor'),
      'field types' => array('text'),
    ),
    'supertags_taxonomy_term_reference_link' => array(
      'label' => t('Flavorized Link'),
      'field types' => array('taxonomy_term_reference'),
    ),
    'flavorized_link' => array(
      'label' => t('Link to flavor content'),
      'field types' => array('entityreference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_prepare_view().
 *
 * This preloads all taxonomy terms for multiple loaded objects at once and
 * unsets values for invalid terms that do not exist.
 */
function supertags_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  foreach ($displays as $id => $settings) {
    if ($settings['type'] == 'supertags_taxonomy_term_reference_link') {
      return taxonomy_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, $items, $displays);
    }
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function supertags_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'supertags_views_title_link':
      $context = _supertags_flavor_context();
      if ($context['term'] != $entity) {
        $element['delta']['#markup'] = '?flavour=' . _supertags_term_path($context['term']);
      }
      break;

    case 'flavorized_link':
      $flavor = _supertags_flavor_context();
      foreach ($items as $delta => $item) {
        $node = node_load($item['target_id']);
        $l_options = array(
          'query' => array(
            'flavour' => $flavor['path'],
          ),
        );
        $element[$delta]['#markup'] = l($node->title, 'node/' . $node->nid, $l_options);
      }
      break;

    case 'supertags_taxonomy_term_reference_link':
      foreach ($items as $delta => $item) {
        if ($item['tid'] == 'autocreate') {
          $element[$delta] = array(
            '#markup' => check_plain($item['name']),
          );
        }
        else {
          $term = $item['taxonomy_term'];
          $uri = entity_uri('taxonomy_term', $term);
          $element[$delta] = array(
            '#type' => 'link',
            '#title' => $term->name,
            '#href' => _supertags_contextual_link($term),
            '#options' => $uri['options'],
          );
        }
      }
      break;
  }

  return $element;
}

/**
 * Implements theme_preprocess_html().
 */
function supertags_preprocess_html(&$variables) {
  $context = _supertags_get_context();
  $flavor = _supertags_flavor_context();
  $content = _supertags_content_type_context();

  $item = menu_get_item();

  if (strpos($item['path'], 'dashboard')) {
    $variables['classes_array'][] = 'page-dashboard';
  }

  if (isset($context['landing_page'])) {
    $landing_page = $context['landing_page'];

    if (isset($flavor)) {
      if (!in_array('page-' . $context['flavor']['class'], $variables['classes_array'])) {
        $variables['classes_array'][] = 'page-' . $flavor['class'];
      }
      $variables['classes_array'][] = 'flavour-' . $flavor['class'];

      if ($landing_page) {
        $variables['classes_array'][] = 'flavour-landing-page';
        $variables['classes_array'][] = 'front';
      }
    }
  }
}

/**
 * Implements theme_preprocess_page().
 */
function supertags_preprocess_page(&$variables) {
  global $theme;

  if ($theme == 'd4eu') {
    $variables['theme_hook_suggestions'][] = 'flavors_normal_page';
    $item = menu_get_item();
    $context = _supertags_get_context();

    $flavor = _supertags_flavor_context();
    $content = _supertags_content_type_context();

    if (isset($context['landing_page'])) {
      $variables['landing_page'] = $context['landing_page'];

      $context = context_load("all_flavors_landing_pages");
      if ($context) {
        context_set('supertags', $context);
      }

      if (isset($flavor)) {
        $variables['site_slogan'] = $flavor['name'];
      }

      $breadcrumb = array();
      $breadcrumb[] = l(t('European Commission'), 'http://ec.europa.eu/index_en.htm', array('external' => TRUE));
      $breadcrumb[] = l(t('Futurium'), '<front>');

      $variables['identity'] = ($flavor['name'] == 'Futurium') ? FALSE : TRUE;

      if ($variables['landing_page']) {
        $variables['theme_hook_suggestions'][] = 'flavors_landing_page';
        if ($flavor['name'] != 'Futurium') {
          $breadcrumb[] = $flavor['name'];
        }
      }
      else {
        if ($flavor['path'] != "futurium") {
          $breadcrumb[] = l($flavor['name'], $flavor['path']);
        }
        $item = menu_get_item();
        if ($item['path'] == 'node/%') {
          $obj = menu_get_object();
          if ($obj->type != 'page') {
            $title = drupal_get_title();
            if (isset($content)) {
              $breadcrumb[] = l($content['mapped_title'], _supertags_contextual_link());
            }
          }
        }
        if ($item['path'] == 'user/%') {
          $breadcrumb[] = l(t('People'), _supertags_contextual_link());
        }
        $breadcrumb[] = drupal_get_title();
      }
      $breadcrumb_separator = '<span class="easy-breadcrumb_segment-separator"> &gt; </span>';

      $variables['breadcrumb'] = implode($breadcrumb_separator, $breadcrumb);
    }
  }
}

/**
 * Implements hook_init().
 *
 *  Sets active menu item.
 */
function supertags_init() {
  $flavor = _supertags_flavor_context();
  $content_type = _supertags_content_type_context();
  if (isset($flavor['term']) && arg(0) != 'search') {
    if ($content_type['machine_name'] == 'page') {
      $path = $_GET['q'];
    }
    else {
      $path = _supertags_contextual_link(NULL, $flavor['term']);
    }
    menu_tree_set_path($flavor['path'] . '-menu', $path);
  }
}


/**
 * Implements hook_preprocess_node().
 */
function supertags_preprocess_node(&$vars) {
  $node = $vars['node'];
  if ($vars['view_mode'] == 'mini_teaser') {

    $flavor = _supertags_flavor_context();

    // FLavor fields aren't translated, so we should use LANGUAGE_NONE
    $lang = LANGUAGE_NONE;
    if (isset($vars['field_default_flavour'][$lang][0]['tid'])) {
      $default_flavor = $vars['field_default_flavour'][$lang][0]['tid'];
      $term = taxonomy_term_load($default_flavor);

      if (isset($flavor['term']) && $flavor['term'] != $term) {
        $path = _supertags_term_path($flavor['term']);
        $vars['node_url'] .= '?flavour=' . $path;
      }
    }
    $node_flavors = _supertags_node_flavors($vars['node']);
    $flavors_except_default = $node_flavors['except_default'];

    $item = menu_get_item();

    if (drupal_is_front_page() || $item['path'] == 'user/%') {

      foreach ($flavors_except_default as $k => $v) {
        $term = taxonomy_term_load($v['tid']);

        $term_path = _supertags_term_path($term);
        $class = _supertags_term_class($term);

        $l_options = array(
          'html' => TRUE,
          'attributes' => array(
            'class' => array('shared-with', $class),
            'title' => $term->name,
            'rel' => 'nofollow',
          ),
          'query' => array(
            'flavour' => $term_path,
          ),
        );
        $link_title = '<span class="stamp-' . $class . '"><span class="element-invisible">' . $term->name . '</span></span>';

        $links[] = l($link_title, 'node/' . $vars['node']->nid, $l_options);
      }

      $default_flavor = $node_flavors['default_flavor']['term']->name;
      $default_flavor_class = _supertags_term_class($node_flavors['default_flavor']['term']);
      $vars['title_prefix']['#markup'] = '<div class="stamp-' . $default_flavor_class . '"><span class="element-invisible">' . $default_flavor . '</span></div>';

      if (!empty($links)) {
        $vars['content']['links_to']['#markup'] = '<div class="shared-flavors"><label>' . t("Shared with") . ':</label>' . implode('', $links) . '</div>';
      }
    }
  }
}

/**
 * Implements hook_preprocess_search_result().
 */
function supertags_preprocess_search_result(&$variables) {
  if (isset($variables['result']['node'])) {
    $node_entity = $variables['result']['node'];
    $node = node_load($node_entity->entity_id);
    $flavor = _supertags_flavor_context();

    $lang = LANGUAGE_NONE;
    if (isset($node->field_default_flavour[$lang][0]['tid'])) {
      $default_flavor = $node->field_default_flavour[$lang][0]['tid'];
      $term = taxonomy_term_load($default_flavor);

      if (isset($flavor['term']) && $flavor['term'] != $term) {
        $path = _supertags_term_path($flavor['term']);
        $variables['url'] .= '?flavour=' . $path;
      }
    }
  }
}

/**
 * Create a new context context.
 */
function _supertags_create_context($contexts, $flavor_name, $flavor_path) {

  // All pages (Landing and non-landing pages).
  if (!isset($contexts[$flavor_path])) {
    ctools_include('export');
    $context = ctools_export_new_object('context');
    $context->name = $flavor_path;
    $context->tag = 'Flavors';
    $context->description = "All pages for " . $flavor_name . " flavor.";
    $context->conditions = array(
      'flavor_condition' => array(
        'values' => array(
          $flavor_path,
        ),
      ),
      'flavor_landing_page_condition' => array(
        'values' => array(
          $flavor_path,
        ),
      ),
    );
    $context->reactions = array(
      'block' => array(
        'blocks' => array(
          'menu-' . $flavor_path . '-menu' => array(
            'module' => 'menu',
            'delta' => $flavor_path . '-menu',
            'region' => 'main_navigation',
            'weight' => -10,
          ),
        ),
      ),
    );
    $context->condition_mode = 0;
    $saved = context_save($context);
  }
}

/**
 * Create a new menu block.
 */
function _supertags_create_menu($flavor_name, $flavor_path) {
  $menu = array(
    'menu_name' => $flavor_path . '-menu',
    'title' => $flavor_name . " Menu",
    'description' => $flavor_name . ' flavor menu',
  );
  menu_save($menu);

  $home_mlid = db_select("menu_links", "m")
    ->condition('menu_name', 'main-menu', '=')
    ->condition('link_path', '<front>', '=')
    ->fields('m', array('mlid'))
    ->execute()
    ->fetchAssoc();

  $home_menu_link = menu_link_load($home_mlid['mlid']);

  // Add a Home entry and a Flavor landing page entry to each menu.
  $current_home_mlid = db_select("menu_links", "m")
    ->condition('menu_name', $flavor_path . '-menu', '=')
    ->condition('link_path', $flavor_path, '=')
    ->fields('m', array('mlid'))
    ->execute()
    ->fetchAssoc();

  if (empty($current_home_mlid)) {
    $new_home_link = $home_menu_link;
    $new_home_link['link_path'] = $flavor_path;
    $new_home_link['mlid'] = NULL;
    $new_home_link['menu_name'] = $flavor_path . '-menu';
    menu_link_save($new_home_link);
  }
}

/**
 * Returns a mapping of the fields that control the flavor behaviours.
 */
function _supertags_fields() {
  // Node fields.
  $fields['flavor_primary'] = 'field_default_flavour';
  $fields['flavor'] = 'field_flavor_s_';
  $fields['tags'] = 'field_tags';
  // Taxonomy fields.
  $fields['path'] = 'field_path';
  $fields['class'] = 'field_class';
  return $fields;
}

/**
 * Returns a mapping of the content types that have flavor fields.
 *
 * @todo Put in admin pages? Will become obsolete when flavor mappings are
 * implemented.
 */
function _supertags_content_types_with_field() {
  $supertags_fields = _supertags_fields();
  $flavor_field_name = $supertags_fields['flavor'];

  $content_types_with_field = array();

  $field_map = field_info_field_map();
  $bundles_with_field = $field_map[$flavor_field_name];
  if (isset($bundles_with_field['bundles']['node'])) {
    $content_types_with_field = $bundles_with_field['bundles']['node'];
  }
  return $content_types_with_field;
}

/**
 * Page callback for flavors.
 */
function _supertags_flavor_page() {
  $markup = "";

  if ($flavor_term = _supertags_flavor_context()) {
    $flavor = $flavor_term['name'];
    $content_context = _supertags_content_type_context();
    if (isset($content_context['machine_name'])) {
      $content_type = $content_context['machine_name'];
      $tag_context = _supertags_tag_context();
      if ($tag_context != NULL) {
        $tid = $tag_context['tid'];
        $tree = $flavor_term['term']->tree;
        if (!empty($tree)) {
          $node = $tree->findNode($tid);
          if (!empty($node)) {
            $path = $tree->getPath($node);
            $path = array();
            $children = $tree->findChildren($tid);
            $items = $children;
          }
        }
        $items[] = $tid;
      }
      if (isset($items)) {
        $tags = implode('+', $items);
      }

      $view = views_get_view('flavors');
      $display_id = 'page_' . $content_type;

      if (!$view->access($display_id)) {
        $msg = "Display '" . $display_id . "' doesn't exist in flavors view. Using 'Master' display instead.";
        if (user_access('administer supertags')) {
          drupal_set_message($msg, 'warning');
        }
        watchdog("Flavors", $msg);
        $display_id = 'default';
      }

      $context = context_load('all_flavors_listings');
      if ($context) {
        context_set('context', $context->name, $context);
      }

      $markup .= (!empty($tags))
        ? views_embed_view('flavors', $display_id, $flavor, $tags)
        : views_embed_view('flavors', $display_id, $flavor);

    }
    else {
      $arg = arg(1);
      if (!empty($arg)) {
        return drupal_not_found();
      }
    }
  }
  return array(
    '#markup' => $markup,
  );
}

/**
 * People page callback.
 */
function _supertags_flavor_user_page() {
  $markup = "";

  if ($flavor_term = _supertags_flavor_context()) {
    $flavor = $flavor_term['name'];
    $markup .= views_embed_view('flavors_people', 'block_people');
  }

  return $markup;
}

/**
 * Block title callback.
 *
 * @return string
 *    Returns block title based on first path argument.
 */
function _supertags_block_title($delta = 'supertags') {
  switch ($delta) {
    case 'ctas':
      $title = "";
      break;

    case 'supertags':
      $title = t("Search by tags");
      break;

    case 'tag_cloud_tags':
      $title = t("Related tags");
      break;

  }
  return $title;
}

/**
 * Block content callback.
 *
 * @return string
 *    Returns block content based on supertags context for CTA block.
 */
function _supertags_ctas_block_content() {
  $markup = "";
  global $user;

  $context = _supertags_get_context();
  $enabled_content_types = _supertags_content_type_mapping($context['flavor']['tid']);

  if ($user->uid == 0) {
    $l_options = array(
      'html' => TRUE,
      'attributes' => array(
        'class' => array('CTAButton'),
        'rel' => 'nofollow',
      ),
    );
    $markup = l('<span>Join here</span><span>to take part</span>', 'user/register', $l_options);
  }
  else {
    if (isset($context['content_type']) &&
      isset($enabled_content_types[$context['content_type']['machine_name']])) {
      $perm_string = 'create ' . $context['content_type']['machine_name'] . ' content';
      if (user_access($perm_string)) {
        $l_options = array(
          'html' => TRUE,
          'attributes' => array(
            'class' => array('CTAButton'),
            'rel' => 'nofollow',
          ),
        );

        $path = $context['flavor']['path'] . '/add/' . str_replace('_', '-', $context['content_type']['machine_name']);
        $label = drupal_substr($context['content_type']['name'], 0, -1);

        if (!empty($context['content_type']['overrides']['title'])) {
          $label = $context['content_type']['overrides']['title'];
        }
        $label = strtolower($label);

        $markup = l('<span>Add</span><span>' . $label . '</span>', $path, $l_options);
      }
    }
  }
  return $markup;
}

/**
 * Block content callback.
 *
 * @return string
 *    Returns block content based on supertags context for supertags block.
 */
function _supertags_block_content() {
  $flavor_context = _supertags_flavor_context();
  $flavor_term = $flavor_context['term'];

  $markup = "";

  if (!empty($flavor_term->tree)) {

    $flavor_path = $flavor_context['path'];
    $content_type_context = _supertags_content_type_context();

    if (!empty($content_type_context)) {

      $content_type_path = $content_type_context['mapped_path'];
      $tag_context = _supertags_tag_context();

      $tid = ($tag_context != NULL) ? $tag_context['tid'] : 0;

      if (!empty($flavor_term->tree)) {
        if ($flavor_term->tree->findNode($tid) == NULL) {
          $tid = 0;
        }
      }

      $class = $tid == 0 ? ' class="selected-tree-item"' : '';

      $link_title = isset($content_type_context['overrides']['title_plural'])
        ? $content_type_context['overrides']['title_plural']
        : $content_type_context['mapped_title'];

      $link = _supertags_contextual_link();

      $markup .= '<div class="tag-nav flavor flavor-tree">';
      $markup .= '<div class="flavor-name">' . l($flavor_term->name, $flavor_path) . '</div>';
      $markup .= '<div class="supertag-tree">';
      $markup .= '<ul class="tree-root"><li' . $class . '>' . l($link_title, $link);
      $markup .= _supertags_print_tree($flavor_term->tree, $tid, $link . "/" . "%name");
      $markup .= '</li></ul>';
      $markup .= '</div>';
      $markup .= '</div>';

    }
  }
  $form = drupal_get_form('supertags_search_form', $flavor_term);
  $markup .= render($form);

  return $markup;
}

/**
 * Block content callback.
 *
 * @return string
 *    Returns block content markup for tag cloud block.
 */
function _supertags_non_supertags_block_content() {
  $obj = menu_get_object();
  $markup = "";

  if (!empty($obj)) {

    $node_flavors = _supertags_node_flavors($obj);

    $flavors = $node_flavors['flavors'];
    $tags_on_node = $node_flavors['tags_on_node'];

    if (!empty($tags_on_node) && !empty($flavors)) {

      $printed_tids = array();

      foreach ($flavors as $k => $term_array) {
        $flavor_term = taxonomy_term_load($term_array['tid']);
        if (_supertags_flavor_pages_access($flavor_term)) {

          $class = _supertags_term_class($flavor_term);
          $flavor_terms = _supertags_on_flavor_tree($flavor_term->tid);
          $print = TRUE;
          $flavor_terms_on_node = array_intersect($flavor_terms, $tags_on_node);

          if (empty($flavor_terms_on_node)) {
            $print = FALSE;
          }

          if ($print) {
            $markup .= '<div class="flavour-tags flavour-' . $class . '">';
            $markup .= '<h4 class="flavour-tags-title">' . $flavor_term->name . '</h4>';
            $markup .= '<div class="flavour-tags-content">';

            foreach ($flavor_terms_on_node as $idx => $term_id) {
              $term = taxonomy_term_load($term_id);
              $printed_tids[] = $term_id;
              $markup .= l($term->name, _supertags_contextual_link($term, $flavor_term));
            }

            $markup .= '</div>';
            $markup .= '</div>';
          }
        }
      }

      // Prepare the last Futurium tags box, to display if tags only.
      $futurium_tagbox = '<div class="flavour-tags flavour-futurium">';
      $futurium_tagbox .= '<h4 class="flavour-tags-title">Futurium</h4>';
      $futurium_tagbox .= '<div class="flavour-tags-content">';

      if (isset($tags_on_node)) {
        $unprinted_tids = array_diff($tags_on_node, $printed_tids);
      }

      $i = 0;
      foreach ($unprinted_tids as $key => $tid) {
        $term = taxonomy_term_load($tid);
        $i++;
        $futurium_tagbox .= l($term->name, _supertags_contextual_link($term));

      }

      $futurium_tagbox .= '</div>';
      $futurium_tagbox .= '</div>';

      if ($i <> 0) {
        $markup .= $futurium_tagbox;
      }
    }
  }
  return $markup;
}

/**
 * Form to search terms.
 */
function supertags_search_form($form, $form_state, $flavor = NULL) {

  $form['search'] = array(
    '#title' => 'Find out more:',
    '#type' => 'textfield',
    '#attributes' => array(
      'placeholder' => t("Search for term"),
    ),
    '#autocomplete_path' => 'supertags/flavor_autocomplete/' . $flavor->tid,
  );

  $form['path'] = array(
    '#type' => 'hidden',
    '#value' => arg(0) . '/' . arg(1),
  );

  $form['button'] = array(
    '#type' => 'submit',
    '#value' => 'Search',
  );
  return $form;
}

/**
 * Search terms form submit handler.
 */
function supertags_search_form_submit($form, $form_state) {
  if (!empty($form_state['input']['search'])) {
    $path = $form_state['input']['path'] . '/' . $form_state['input']['search'];
    drupal_goto($path);
  }
}

/**
 * Returns a list of term ids that are on a flavor tree.
 */
function _supertags_on_flavor_tree($flavor_tid) {

  $query = db_select('field_data_field_flavor_tree', 'f');
  $query->leftJoin('field_data_field_parent_tag', 'p', 'f.field_flavor_tree_value = p.entity_id');
  $query->join('field_data_field_children_tags', 'c', 'f.field_flavor_tree_value = c.entity_id');
  $query->join('taxonomy_term_data', 't', '(t.tid = p.field_parent_tag_tid OR t.tid = c.field_children_tags_tid)');
  $query->fields('t', array('tid'))
    ->condition('f.entity_id', $flavor_tid, '=')
    ->groupBy('t.tid');

  $result = $query
    ->execute()
    ->fetchAllAssoc('tid', PDO::FETCH_ASSOC);

  $values = array_keys($result);
  return $values;
}

/**
 * Autocomplete handler.
 */
function _supertags_autocomplete($flavor_tid, $string) {

  $query = db_select('taxonomy_term_data', 't');
  $query->fields('t', array('tid', 'name'))
    ->condition('t.name', db_like($string) . '%', 'LIKE')
    ->groupBy('t.name');

  $result = $query
    ->execute()
    ->fetchAllAssoc('name', PDO::FETCH_ASSOC);

  $matches = array();
  $values = array_keys($result);
  foreach ($values as $key => $value) {
    $matches[$value] = $value;
  }

  return drupal_json_output($matches);
}

/**
 * Prints a tree.
 *
 * @param SupertagsTree $tree
 *    The tree object to print.
 * @param int $tid
 *    The selected tree item id.
 * @param string $link_path
 *    An override to apply the term item paths.
 */
function _supertags_print_tree(SupertagsTree $tree, $tid = 0, $link_path = NULL) {
  if ($tid != 0) {
    $node = $tree->findNode($tid);
    if (!empty($node)) {
      return $tree->printToPath($node, $link_path);
    }
  }
  else {
    return $tree->printFirstLevel($link_path);
  }
}

/**
 * Build super tags trees.
 *
 * @param string $flavor_term
 *   Flavor term.
 *
 * @return array
 *   Tree.
 */
function _supertags_build_tree($flavor_term) {

  foreach ($flavor_term->field_flavor_tree as $k => $v) {
    foreach ($v as $item) {
      $field_collection_items[] = entity_load('field_collection_item', array($item['value']));
    }
  }

  if (!empty($flavor_term) && !empty($field_collection_items)) {
    $t = _supertags_build_branches($field_collection_items, $flavor_term->tid);
    return $t;
  }
}

/**
 * Create super tags branches.
 *
 * @param string $field_collection_items
 *   Collection (super tag)  item.
 * @param int $flavor_term_tid
 *   Super tag id.
 *
 * @return array
 *   Super tag branch.
 */
function _supertags_build_branches(&$field_collection_items, $flavor_term_tid) {

  $root_properties = array(
    'tid' => NULL,
    'text' => NULL,
    'parentNode' => NULL,
    'depth' => 0,
  );
  $root = new SupertagsNode($root_properties);
  $tree = new SupertagsTree($root);

  static $branches_to_ignore = array();

  $lang = LANGUAGE_NONE;
  if (!empty($field_collection_items)) {
    foreach ($field_collection_items as $k => $field_collection) {
      $item = array_pop($field_collection);

      if (isset($item->field_parent_tag[$lang])) {
        $parent = $item->field_parent_tag[$lang];
        $parent_tid = $parent[0]['tid'];
      }
      else {
        $parent_tid = NULL;
      }

      $children = $item->field_children_tags[$lang];
      $child_branches = array();

      foreach ($children as $key => $value) {
        $child_tid = $value['tid'];
        $tree->addNode($child_tid, $parent_tid);
      }
    }
    return $tree;
  }
}

/**
 * Convert a string to plural form.
 *
 * @return array
 *    String in plural.
 */
function _supertags_plural($string) {
  if (drupal_substr($string, -1) != 's') {
    $string .= 's';
  }
  return $string;
}

/**
 * Builds the supertag context.
 *
 * @return array
 *    Array containing supertag context.
 */
function _supertags_get_context() {
  static $supertags_context;

  $item = menu_get_item();
  if (empty($supertags_context)) {

    $vocab = taxonomy_vocabulary_machine_name_load('flavors');

    switch ($item['path']) {

      case 'node/%':
      case 'node/%/edit':
        $obj = menu_get_object();

        $context = context_load('node_pages');
        if ($context) {
          context_set('supertags', $context);
        }

        $flavor_fields = _supertags_fields();
        $flavor_primary = $flavor_fields['flavor_primary'];
        $flavor_field = $flavor_fields['flavor'];

        if (isset($obj->{$flavor_field}) && !empty($obj->{$flavor_field})) {
          $field_items = field_get_items('node', $obj, $flavor_primary);

          if ($field_items) {
            $field_item = reset($field_items);
            $field_value = $field_item['tid'];
            $flavor_term = taxonomy_term_load($field_value);

            $content_types = array_keys(node_type_get_types());
            $content_type_arg = $obj->type;

            $mapping = _supertags_content_type_mapping($flavor_term->tid);

            if (in_array($content_type_arg, $content_types)) {
              $arg['content_type'] = $mapping[$obj->type];
              $types = node_type_get_types();
              $content_type = $types[$content_type_arg];
            }
          }
        }
        break;

      default:
        $arg['flavor'] = arg(0);
        $flavor_term = _supertags_get_term_by_path($arg['flavor']);

        if (!empty($flavor_term)) {
          $arg['content_type'] = arg(1);
          $content_types = array_keys(node_type_get_types());
          $enabled_content_types = _supertags_content_types_with_field();
          $mapping = _supertags_content_type_mapping($flavor_term->tid);

          $content_type_machine_name = FALSE;
          foreach ($mapping as $machine_name => $settings) {
            if ($settings['path'] == $arg['content_type']) {
              $content_type_machine_name = $machine_name;
            }
          }

          if (in_array($content_type_machine_name, $enabled_content_types)) {
            $types = node_type_get_types();
            if (empty($content_type_machine_name)) {
              $content_type_machine_name = $arg['content_type'];
            }
            if (isset($content_type_machine_name)) {
              if (isset($types[$content_type_machine_name])) {
                $content_type = $types[$content_type_machine_name];
                $arg['tag'] = arg(2);
                if (!empty($arg['tag'])) {
                  $arg['tag'] = html_entity_decode($arg['tag']);
                  $tags_url = explode('+', $arg['tag']);
                  $tag_ = taxonomy_get_term_by_name($tags_url[0], "tags");
                  $tag_term = array_pop($tag_);
                }
              }
            }
          }
        }
        break;

    }

    if (isset($_GET['flavour'])) {
      $flavor_term = _supertags_get_term_by_path($_GET['flavour']);
    }

    if (isset($flavor_term)) {
      $flavor_term_path = _supertags_term_path($flavor_term);
      $flavor_term_class = _supertags_term_class($flavor_term);

      $supertags_context['flavor']['name'] = $flavor_term->name;
      $supertags_context['flavor']['tid'] = $flavor_term->tid;
      $supertags_context['flavor']['path'] = $flavor_term_path;
      $supertags_context['flavor']['term'] = $flavor_term;
      $supertags_context['flavor']['class'] = $flavor_term_class;

      if (isset($content_type)) {
        $supertags_context['content_type']['name'] = _supertags_plural($content_type->name);
        $supertags_context['content_type']['machine_name'] = $content_type->type;
        $supertags_context['content_type']['path'] = $content_type->type;
        if (!is_array($arg['content_type'])) {
          $supertags_context['content_type']['mapped_path'] = $arg['content_type'];
          $supertags_context['content_type']['mapped_title'] = ucfirst($arg['content_type']);
        }
        else {
          $supertags_context['content_type']['mapped_path'] = $arg['content_type']['path'];
          $supertags_context['content_type']['mapped_title'] = $arg['content_type']['label'];
        }
        $default_settings = unserialize(variable_get('topic_' . $flavor_term->tid . '_settings', ''));
        if (!empty($default_settings[$content_type->type]['label'])) {
          $supertags_context['content_type']['overrides']['title'] = $default_settings[$content_type->type]['label'];
        }
        if (!empty($default_settings[$content_type->type]['label_plural'])) {
          $supertags_context['content_type']['overrides']['title_plural'] = $default_settings[$content_type->type]['label_plural'];
        }
        if (!empty($default_settings[$content_type->type]['path'])) {
          $supertags_context['content_type']['overrides']['path'] = $default_settings[$content_type->type]['path'];
        }

        if (isset($tag_term)) {
          $supertags_context['tag']['name'] = $tag_term->name;
          $supertags_context['tag']['tid'] = $tag_term->tid;
          $supertags_context['tag']['term'] = $tag_term;
        }
      }
      else {
        if ($item['path'] == 'user/%' || arg(1) == 'people') {
          $supertags_context['content_type']['name'] = 'People';
          $supertags_context['content_type']['machine_name'] = 'people';
          $supertags_context['content_type']['path'] = 'people';
          $supertags_context['content_type']['mapped_path'] = 'people';
          $supertags_context['content_type']['mapped_title'] = 'People';
        }
      }
    }
    else {
      $supertags_context['flavor'] = array(
        'name' => 'Futurium',
        'path' => 'futurium',
        'class' => 'futurium',
      );
    }
  }
  $homes = array('home');
  $vocab = taxonomy_vocabulary_machine_name_load('flavors');
  if (!empty($vocab)) {
    $tree = taxonomy_get_tree($vocab->vid, 0, NULL, TRUE);
    foreach ($tree as $key => $value) {
      $homes[] = _supertags_term_path($value);
    }
    $supertags_context['landing_page'] = in_array($item['path'], $homes);
  }
  return $supertags_context;
}


/**
 * Returns flavor context info.
 *
 * @return array
 *    Array containing flavor info.
 */
function _supertags_flavor_context() {
  $context = _supertags_get_context();
  return isset($context['flavor']) ? $context['flavor'] : NULL;
}

/**
 * Returns content type context info.
 *
 * @return array
 *    Array containing content type info.
 */
function _supertags_content_type_context() {
  $context = _supertags_get_context();
  return isset($context['content_type']) ? $context['content_type'] : NULL;
}

/**
 * Returns tag context info.
 *
 * @return array
 *    Array containing tag info.
 */
function _supertags_tag_context() {
  $context = _supertags_get_context();
  return isset($context['tag']) ? $context['tag'] : NULL;
}

/**
 * Implements hook_node_access.
 *
 * @param $node
 * @param $op
 * @param $account
 *
 * @return bool
 */
function supertags_node_access($node, $op, $account) {
  // DAE-1361: block node creation/update on nodes for which the default flavor is archived.
  if (is_string($node)) {
    $q = arg(0);
    $term = _supertags_get_term_by_path($q);

    if (is_object($term) && $term->field_flavor_archived[LANGUAGE_NONE][0]['value'] == 1) {
      return NODE_ACCESS_DENY;
    }
    return NODE_ACCESS_IGNORE;
  }
  if (is_object($node)) {
    // Return node field_default_flavor.`
    $node_default_flavor = $node->field_default_flavour[LANGUAGE_NONE][0]['tid'];

    if ($node_default_flavor = taxonomy_term_load($node_default_flavor)) {
      $default_archived = $node_default_flavor->field_flavor_archived[LANGUAGE_NONE][0]['value'];
    }
    // Disallow create an update access for on a node for which the default flavor is archived.
    if (($op == 'create' || $op == 'update') && (!empty($account->name)) && ($default_archived == 1)) {
    return NODE_ACCESS_DENY;
    }
  }
}

/**
 * Returns an array with supertags info on node.
 *
 * @param object $node
 *    The node where to get the supertags info.
 *
 * @return array
 *    Supertags info.
 */
function _supertags_node_flavors($node) {
  $tags_on_node = NULL;

  $fields = _supertags_fields();

  $default_flavor_field_name = $fields['flavor_primary'];
  $flavor_field_name = $fields['flavor'];
  $tags_field_name = $fields['tags'];

  $default_flavor = field_get_items('node', $node, $default_flavor_field_name);
  $flavors = field_get_items('node', $node, $flavor_field_name);
  $tags = field_get_items('node', $node, $tags_field_name);

  $default_flavor_tid = $default_flavor[0]['tid'];
  $term = taxonomy_term_load($default_flavor_tid);
  $all_flavors = $flavors;

  if (!empty($flavors)) {
    foreach ($flavors as $key => $value) {
      if ($value['tid'] == $default_flavor_tid) {
        unset($flavors[$key]);
      }
    }
  }

  if (!empty($tags)) {
    foreach ($tags as $k => $v) {
      $tags_on_node[] = $v['tid'];
    }
  }

  $return = array(
    'default_flavor' => array(
      'tid' => $default_flavor_tid,
      'term' => $term,
    ),
    'flavors' => $all_flavors,
    'except_default' => $flavors,
    'tags_on_node' => $tags_on_node,
  );

  return $return;
}

/**
 * Returns a link using supertags context values.
 *
 * @param mixed $term
 *    Term to link to.
 * @param mixed $flavor
 *    Override to a specific flavor.
 *
 * @return string
 *    Path.
 */
function _supertags_contextual_link($term = NULL, $flavor = NULL) {
  $context = _supertags_get_context();
  if (isset($flavor)) {
    $context['flavor']['path'] = _supertags_term_path($flavor);
  }

  $link = "";

  if (isset($context['content_type'])) {
    $link = $context['flavor']['path'] . '/' . $context['content_type']['mapped_path'];
    if (!empty($term)) {
      $link .= '/' . $term->name;
    }
  }
  else {
    $link = $context['flavor']['path'];
  }
  return $link;
}

/**
 * Get a path from a term.
 *
 * @param object $term
 *    The flavor term.
 *
 * @return string
 *    A string to be used as path.
 */
function _supertags_term_to_path($term) {
  $path = strtolower($term->name);
  $path = str_replace(' ', '_', $path);
  return $path;
}

/**
 * Returns the field path associated with a term.
 *
 * @param object $term
 *    The flavor term.
 *
 * @return string
 *    A string containing the term path.
 */
function _supertags_term_path($term) {
  $flavor_fields = _supertags_fields();
  $flavor_path_field = $flavor_fields['path'];
  if (isset($term->{$flavor_path_field}) && !empty($term->{$flavor_path_field})) {
    $field_items = field_get_items('taxonomy_term', $term, $flavor_path_field);
  }
  $path = (!empty($field_items)) ? $field_items[0]['value'] : _supertags_term_to_path($term);
  return $path;
}

/**
 * Returns the field class value associated with a term.
 *
 * @param object $term
 *    The flavor term.
 *
 * @return string
 *    A string of CSS classes.
 */
function _supertags_term_class($term) {
  $flavor_fields = _supertags_fields();
  $flavor_class_field = $flavor_fields['class'];
  if (isset($term->{$flavor_class_field}) && !empty($term->{$flavor_class_field})) {
    $field_items = field_get_items('taxonomy_term', $term, $flavor_class_field);
  }
  $classes = (!empty($field_items)) ? $field_items[0]['value'] : _supertags_term_to_path($term);
  return $classes;
}

/**
 * Mapping for the default menu links path.
 *
 * @return array
 *    Content type machine name => path.
 */
function _supertags_content_type_mapping($flavor_tid = NULL) {

  $content_types = node_type_get_types();
  $content_types_with_field = _supertags_content_types_with_field();

  $weight = 10;
  foreach ($content_types_with_field as $index => $content_type_machine_name) {
    if (isset($content_types[$content_type_machine_name])) {
      $current_content_type = $content_types[$content_type_machine_name];
      $default[$content_type_machine_name] = array(
        'original' => $current_content_type->name,
        'label' => $current_content_type->name,
        'label_plural' => $current_content_type->name,
        'path' => $current_content_type->type,
        'weight' => $weight,
        'enabled' => 0,
      );
    }
    $weight++;
  }

  if ($flavor_tid) {
    $default_settings = unserialize(variable_get('topic_' . $flavor_tid . '_settings', ''));

    if (!empty($default_settings)) {
      foreach ($default_settings as $machine_name => $settings) {
        $default[$machine_name] = $settings;
      }
    }
  }
  return $default;
}

/**
 * Access callback for hook_menu items.
 *
 * @param int $term
 *    Flavor term.
 * @param string $page
 *    The page we're checking the user has access to.
 *
 * @return bool
 *    If user is to be given access or not.
 */
function _supertags_flavor_pages_access($term, $page = NULL) {
  if ($page == 'dashboard-main') {
    $perms['super_admin'] = user_access('administer supertags');

    $vocab = taxonomy_vocabulary_machine_name_load('flavors');
    $tree = taxonomy_get_tree($vocab->vid, 0, NULL, TRUE);
    foreach ($tree as $key => $value) {
      $perms['manage ' . $value->name . ' flavor'] = user_access('manage ' . $value->name . ' flavor');
    }
    return array_filter($perms);
  }
  elseif (_supertags_is_flavor($term)) {

    if (!_supertags_is_active($term)) {
      return (user_access('administer supertags') || user_access('manage ' . $term->name . ' flavor'));
    }
    else {
      switch ($page) {

        case 'people':
          return user_is_logged_in();

        case 'dashboard':
          return (user_access('administer supertags') || user_access('manage ' . $term->name . ' flavor'));

        default:
          return TRUE;

      }
    }
  }
  return FALSE;
}

/**
 * Implements hook_preprocess_block().
 */
function supertags_preprocess_block(&$vars) {
  if ($vars['block_html_id'] == 'block-views-flavors-blocks-block') {
    $vars['classes_array'][] = 'user-blocks';
    $class_idx = array_search('block', $vars['classes_array']);
    unset($vars['classes_array'][$class_idx]);
  }
  if ($vars['block_html_id'] == 'block-views-flavor-misc-blocks-block-1') {
    $vars['classes_array'][] = 'views-blog_d4eu-block_1';
  }

  // Preprocess bean blocks.
  if (isset($vars['elements']['bean'])) {
    global $user;

    $bean_arr = array_shift($vars['elements']['bean']);
    if (isset($bean_arr['#entity'])) {
      $bean = $bean_arr['#entity'];
      if (is_object($bean)) {
        $vars['bean'] = $bean;
        $vars['visible'] = TRUE;

        $visibility = field_get_items('bean', $bean, 'field_roles');
        $visibility = $visibility[0]['value'];

        switch ($visibility) {
          case 'anonymous':
            if ($user->uid != 0) {
              $vars['visible'] = FALSE;
            }
            break;

          case 'authenticated':
            if ($user->uid == 0) {
              $vars['visible'] = FALSE;
            }
            break;

        }

        $vars['formatted_link'] = "";

        $field_block_type = field_get_items('bean', $bean, 'field_block_type');
        if (isset($field_block_type[0]['value'])) {
          $vars['classes_array'][] = $field_block_type[0]['value'];
        }

        $field_block_classes = field_get_items('bean', $bean, 'field_block_type');
        if (isset($field_block_classes[0]['safe_value'])) {
          $vars['classes_array'][] = $field_block_classes[0]['safe_value'];
        }

        $field_links = field_get_items('bean', $bean, 'field_links');
        if (isset($field_links[0]['value'])) {
          $links_fc = $field_links[0]['value'];
          $entities = entity_load('field_collection_item', array($links_fc));

          $links_e = array_shift($entities);

          if (!empty($links_e->field_call_to_action)) {
            $markup = "";
            $link_items = field_get_items('field_collection_item', $links_e, 'field_link_type');
            $vars['link']['type'] = $link_items[0]['value'];

            $link_link_items = field_get_items('field_collection_item', $links_e, 'field_call_to_action');
            $vars['link']['link'] = $link_link_items[0];

            $spans = explode('|', $vars['link']['link']['title']);
            $class = 'normal-link';
            if ($vars['link']['type'] == 'cta') {
              $class = 'CTAButton';
            }
            foreach ($spans as $k => $v) {
              $markup .= '<span>' . $v . '</span>';
            }

            $vars['formatted_link'] = l($markup, $vars['link']['link']['url'], array(
              'html' => TRUE,
              'attributes' => array(
                'class' => array(
                  $class,
                ),
                'rel' => 'nofollow',
              ),
            ));
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hides taxonomy fields on add/edit and sets their values on node creation.
 */
function supertags_form_node_form_alter(&$form, &$form_state) {
  $fields = _supertags_fields();
  $context = _supertags_get_context();
  $item = menu_get_item();

  if (!user_access('edit supertags fields')) {
    $form['field_digital4eu_supertags']['#attributes']['style'][] = 'display:none;';
    $form['field_digital4eu_untags']['#attributes']['style'][]    = 'display:none;';
    $form[$fields['flavor_primary']]['#attributes']['style'][]    = 'display:none;';
    $form[$fields['flavor']]['#attributes']['style'][]            = 'display:none;';
  }

  // Fill default field values for new nodes.
  if ($item['path'] != 'node/%/edit') {
    if (isset($context['flavor']['term'])) {
      $flavor = $context['flavor']['term'];
      $form[$fields['flavor_primary']][LANGUAGE_NONE]['#default_value'] = $flavor->tid;
      $form[$fields['flavor']][LANGUAGE_NONE]['#default_value'] = array($flavor->tid);
    }
    elseif (isset($_GET['flavor'])) {
      $flavor = _supertags_get_term_by_path($_GET['flavor']);
      $form[$fields['flavor_primary']][LANGUAGE_NONE]['#default_value'] = $flavor->tid;
      $form[$fields['flavor']][LANGUAGE_NONE]['#default_value'] = array($flavor->tid);
    }
  }

  if (isset($_GET['field_tags']) && is_numeric($_GET['field_tags'])) {
    if (isset($form['field_tags'][LANGUAGE_NONE]['#default_value'])) {
      $term = taxonomy_term_load($_GET['field_tags']);
      if ($term !== FALSE) {
        $form['field_tags'][LANGUAGE_NONE]['#default_value'] = array($term->name);
      }
    }
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hides pathauto options and relations for Flavours taxonomy.
 */
function supertags_form_taxonomy_form_term_alter(&$form, &$form_state) {
  if ($form['#vocabulary']->machine_name == 'flavors') {

    $form['path']['#access'] = FALSE;
    $form['description']['#format'] = 'plain_text';

    $form['relations']['#prefix'] = '<div style="display:none">';
    $form['relations']['#suffix'] = '</div>';

    $topic = (object) $form['#term'];

    $default_settings = _supertags_content_type_mapping($topic->tid);

    $rows['#tree'] = TRUE;

    $header = array(
      'Content type',
      'Call to action label',
      'List titles',
      'List path',
      'Order',
      'Enabled',
    );

    $descriptions = array(
      'title' => t('The content type global name.'),
      'label' => t('Override the content type name.'),
      'path' => t('The path where listing for this content type content will be located.'),
      'enabled' => t('Whether this content type is enabled.'),
    );

    $idx = 0;

    $content_types = node_type_get_types();

    foreach ($default_settings as $machine_name => $row_settings) {

      $rows[$machine_name] = array(
        'title' => array(
          '#type' => 'item',
          '#markup' => $content_types[$machine_name]->name,
        ),
        'label' => array(
          '#type' => 'textfield',
          '#default_value' => $row_settings['label'],
          '#description' => t("The label to use with this content type."),
        ),
        'label_plural' => array(
          '#type' => 'textfield',
          '#default_value' => $row_settings['label_plural'],
          '#description' => t("The label to use with this content type. (plural)"),
        ),
        'path' => array(
          '#type' => 'textfield',
          '#default_value' => $row_settings['path'],
          '#description' => t("A path to a listing to use with this content type."),
        ),
        'weight' => array(
          '#type' => 'textfield',
          '#default_value' => $row_settings['weight'],
          '#description' => t("The order on the menu."),
          '#size' => 3,
          '#attributes' => array('class' => array('item-row-weight')),
        ),
        'enabled' => array(
          '#type' => 'checkbox',
          '#default_value' => $row_settings['enabled'],
        ),
      );
    }

    uasort($rows, '_supertags_overrides_form_compare_weights');

    $form['table'] = array(
      '#prefix' => '<br><label>' . t("Overrides") . '</label>',
      '#theme' => 'supertags_overrides_table_form_table',
      '#header' => $header,
      'rows' => $rows,
      '#weight' => 5,
    );

    $form['#submit'][] = 'supertags_overrides_submit';

  }
}

/**
 * Helper function to sort rows.
 */
function _supertags_overrides_form_compare_weights($a, $b) {
  return $a['weight']['#default_value'] > $b['weight']['#default_value'];
}

/**
 * Form submit handler.
 *
 * Saves the per flavour values for labels, menu order, etc.
 */
function supertags_overrides_submit($form, $form_state) {
  $topic = $form_state['term'];
  variable_set('topic_' . $topic->tid . '_settings', serialize($form_state['input']['rows']));
}

/**
 * Submit function replacement to search form.
 *
 * Replaces the apachesolr_search_form_search_submit submit handler in search
 * forms to allow contextual search in flavors.
 */
function supertags_apachesolr_search_form_search_submit($form, &$form_state) {
  $fv = $form_state['values'];
  // Replace keys with their rawurlencoded value.
  if (isset($fv['search_block_form'])) {
    $raw_keys = str_replace("/", "%2f", $fv['search_block_form']);
    $form_state['redirect'] = str_replace($fv['search_block_form'], $raw_keys, $form_state['redirect']);
    $context = _supertags_get_context();
    if (isset($context['flavor']['term']->tid)) {
      $path = $context['flavor']['path'];
      $redir_path = $form_state['redirect'];
      $form_state['redirect'] = array(
        $redir_path,
        array(
          'query' => array(
            'flavour' => $path,
          ),
        ),
      );
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Changes default submit handler for search forms.
 */
function supertags_form_search_block_form_alter(&$form, &$form_state, $form_id) {
  $idx = array_search('apachesolr_search_form_search_submit', $form['#submit']);
  unset($form['#submit'][$idx]);
  $form['#submit'][] = 'supertags_apachesolr_search_form_search_submit';
}

/**
 * Adds a query parameter to links containing 'user'.
 *
 * @param array &$variables
 *    Array of link variables.
 */
function supertags_preprocess_link(array &$variables) {
  global $theme;
  if ($theme == 'd4eu') {
    $path = $variables['path'];

    // Fix active class when urls have &.
    $q = str_replace('&amp;', '&', $_GET['q']);
    if ($path === $q) {
      $variables['options']['attributes']['class'][] = 'active';
    }

    $context = _supertags_flavor_context();
    if (isset($context['term'])) {
      $tid = $context['term']->tid;

      if (strpos($path, 'user/login') !== FALSE) {
        $variables['options']['query']['destination'] = current_path();
        if (isset($context['term'])) {
          $variables['options']['query']['flavour'] = $context['path'];
        }
      }
      elseif ($path == 'user'
        || strpos($path, 'user/') !== FALSE
        || strpos($path, 'search/site') !== FALSE) {
        $variables['options']['query']['flavour'] = $context['path'];
      }
    }
  }
}

/**
 * Returns a taxonomy term by path.
 *
 * @param string $path
 *   A string containing a path argument.
 *
 * @return mixed
 *   A term object or NULL if none found.
 */
function _supertags_get_term_by_path($path) {
  static $flavors = array();
  $flavor_term = NULL;

  $vocab = taxonomy_vocabulary_machine_name_load('flavors');
  if (!isset($flavors['path']) && !empty($vocab)) {
    $query = new EntityFieldQuery();
    $result = $query
      ->entityCondition('entity_type', 'taxonomy_term')
      ->propertyCondition('vid', $vocab->vid)
      ->fieldCondition('field_path', 'value', $path, '=')
      ->range(0, 1)
      ->execute();

    if (isset($result['taxonomy_term'])) {
      $tid = array_keys($result['taxonomy_term']);
      $flavor_term = taxonomy_term_load($tid[0]);
      $flavors['path'] = $flavor_term;
    }
  }
  return $flavor_term;
}

/**
 * Implements hook_apachesolr_update_index().
 */
function supertags_apachesolr_update_index(&$document, $node) {
  $document->im_field_flavor_s_ = $node->field_flavor_s_;
}

/**
 * Implements hook_apachesolr_query_prepare().
 */
function supertags_apachesolr_query_prepare(DrupalSolrQueryInterface $query) {
  $context = _supertags_get_context();
  if (isset($context['flavor']['term']->tid)) {
    $tid = $context['flavor']['term']->tid;
    $filter = new SolrFilterSubQuery('AND');
    $filter->addFilter('im_field_flavor_s_', $tid);
    $query->addFilterSubQuery($filter);
  }
}

/**
 * Helper function.
 *
 * Returns true if a term belongs to "Flavors" taxonomy.
 */
function _supertags_is_flavor($term) {
  return $term->vocabulary_machine_name == "flavors";
}

/**
 * Helper function.
 *
 * Returns true if a Flavor is active.
 */
function _supertags_is_active($term) {
  if (_supertags_is_flavor($term)) {
    return $term->field_flavor_active[LANGUAGE_NONE][0]['value'] == "1";
  }
  else {
    return FALSE;
  }
}

/**
 * Theme callback for the form table.
 */
function theme_supertags_overrides_table_form_table(&$variables) {
  // Get the useful values.
  $form = $variables['form'];
  $rows = $form['rows'];
  $header = $form['#header'];

  // Setup the structure to be rendered and returned.
  $content = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => array(),
    '#attributes' => array('id' => "draggable-table"),
  );

  // Traverse each row.  @see element_chidren().
  foreach (element_children($rows) as $row_index) {
    $row = array();
    // Traverse each column in the row.  @see element_children().
    foreach (element_children($rows[$row_index]) as $col_index) {
      // Render the column form element.
      $row[] = drupal_render($rows[$row_index][$col_index]);
    }
    // Add the row to the table.
    $content['#rows'][] = array('data' => $row, 'class' => array('draggable'));
  }

  drupal_add_tabledrag('draggable-table', 'order', 'sibling', 'item-row-weight');

  // Redner the table and return.
  return drupal_render($content);
}

/**
 * Administrative form.
 */
function _supertags_administration() {

  $form['reset_paths'] = array(
    '#value' => t("Reset paths"),
    '#type' => 'submit',
    '#name' => 'reset',
    '#description' => t("Resets all flavor related paths. Click here if you're having problems with duplicate menu items."),
  );

  $form['#submit'] = array('supertags_administration_form_submit');

  return system_settings_form($form);

}

/**
 * Submit handler for administrative tasks form.
 *
 * @param array $form
 *    Form.
 * @param array $form_state
 *    Form state.
 */
function supertags_administration_form_submit(array $form, array $form_state) {
  if (isset($form_state['triggering_element']['#name']) &&
    $form_state['triggering_element']['#name'] == 'reset') {

    $vocab = taxonomy_vocabulary_machine_name_load('flavors');
    $tree = taxonomy_get_tree($vocab->vid, 0, NULL, TRUE);
    if (!empty($tree)) {
      foreach ($tree as $key => $value) {
        $flavor_path = _supertags_term_path($value);
        // Reset all generated paths.
        db_delete('menu_router')
          ->condition('path', db_like($flavor_path) . '%', 'LIKE')
          ->execute();

        db_delete('menu_links')
          ->condition('link_path', db_like($flavor_path) . '%', 'LIKE')
          ->execute();
      }
    }
  }
}
