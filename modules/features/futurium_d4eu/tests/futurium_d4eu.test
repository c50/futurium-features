<?php

/**
 * @file
 * Tests for futurium_d4eu.module.
 */

/**
 * Testing the "Futurium D4EU" feature compliance with requrements.
 */
class FuturiumD4euQAWebTestCase extends DrupalWebTestCase {

  /**
   * Returns test information.
   *
   * @return array
   *   Information array
   */
  public static function getInfo() {
    return array(
      'name'        => 'Futurium D4EU QA',
      'description' => 'Tests the Futurium Digital Single market (d4eu) feature for Quality Assurance.',
      'group'       => 'Futurium',
    );
  }

  /**
   * Test Info File.
   *
   * TestFile <featurename>.info.
   */
  public function testInfoFile() {
    $module = basename(__FILE__, ".test");
    $path   = drupal_get_path('module', $module) . '/' . $module . '.info';
    $info   = drupal_parse_info_file($path);

    // Add name information. Ex: name=Newsletters.
    $this->assertTrue(array_key_exists('name', $info), 'The module\'s name is available.' . $module);

    // Add description information.
    // Ex: description = Publish and send newsletters to lists of subscribers.
    $this->assertTrue(array_key_exists('description', $info), 'The module\'s description is available.');

    // Add package information.
    // Ex: package = Multisite_features
    $this->assertTrue(array_key_exists('package', $info), 'The module\'s package is available.');

    // Add core information.
    // Ex core = 7.x
    $this->assertTrue(array_key_exists('core', $info), 'The Drupal core version is available.');
    $this->assertEqual($info['core'], '7.x');

    // Add php information.
    // Ex: php = 5.2.4
    $this->assertTrue(array_key_exists('php', $info), 'The PHP version info is available.');
    $this->assertEqual($info['php'], '5.2.4');

    // Add version information
    // Ex: version = 7.x-1.0
    $this->assertTrue(array_key_exists('version', $info));

    // Add feature information:
    // features[features_api][] = api:1
    $this->assertEqual($info['features']['features_api'][0], 'api:2', 'The Feature API dependency is available.');

    // Remove menu dependencies:
    if (array_key_exists('dependencies', $info)) {
      // dependencies[] = "menu"
      $this->assertFalse(in_array('menu', $info['dependencies']), 'There is no reference to the menu dependency.');

      // Remove taxonomy dependencies
      // dependencies[] = "taxonomy"
      $this->assertFalse(in_array('taxonomy', $info['dependencies']), 'There is no reference to the taxonomy dependency.');
    }
    // Check other dependencies (modules + features) to be sure they are needed
    // FIXME: manual check?
    // Remove tags taxonomy:
    // features[taxonomy][] = "tags"
    if (array_key_exists('features', $info) && array_key_exists('taxonomy', $info['features'])) {
      $this->assertFalse(in_array('tags', $info['features']['taxonomy']), 'The dependency to the tags taxonomy has been removed.');
    }
  }

  /**
   * Test install file.
   */
  public function testInstallFile() {
    $module = basename(__FILE__, ".test");
    $path   = drupal_get_path('module', $module) . '/' . $module . '.install';
    $data   = file_get_contents($path);
    $this->assertTrue(strpos($data, $module . '_install'), 'The module contains a hook_install');
    $this->assertTrue(strpos($data, $module . '_uninstall'), 'The module contains a hook_uninstall');
    $this->assertTrue(strpos($data, $module . '_enable'), 'The module contains a hook_enable');
    $this->assertTrue(strpos($data, $module . '_disable'), 'The module contains a hook_disable');
  }

}

/**
 * Defines a base class for testing the Futurium Digital for Europe module.
 */
class FuturiumD4euDevelopmentTestCase extends DrupalWebTestCase {
  protected $adminUser;
  protected $editUser;

  /**
   * Returns test information.
   *
   * @return array
   *   Information array
   */
  public static function getInfo() {
    return array(
      'name'        => 'Futurium D4EU content',
      'description' => 'Tests Futurium Digital4EU feature.',
      'group'       => 'Futurium',
    );
  }

  /**
   * Set up test environment.
   */
  public function setUp() {

    parent::setUp(array('futurium_d4eu'));

    $this->adminUser = $this->drupalCreateUser(
      array(
        'administer blocks',
        'access content',
        'administer content types',
        'administer nodes',
        'administer site configuration',
        'administer taxonomy',
        'administer users',
        'administer views',
      )
    );

    $this->editUser = $this->drupalCreateUser(
      array(
        'administer files',
        'access content',
        'administer nodes',
        'administer taxonomy',
        'administer views',
        'create ideas content',
        'create event_d4eu content',
        'create video_d4eu content',
      )
    );
  }

  /**
   * Test node ideas for editor.
   */
  protected function testIdeasAccess() {
    // Login an editor user.
    $this->drupalLogin($this->editUser);

    $edit = array(
      'title' => $this->randomName(8),
    );

    // Checks is Ideas node form.
    $this->drupalPost('node/add/ideas', $edit, t('Save'));
    $this->assertText(t('has been created.'), t('An ideas content has been created.'));

    // Logs out.
    $this->drupalLogout();
  }

  /**
   * Test node event for editor.
   */
  protected function testEventAccess() {
    // Login an editor user.
    $this->drupalLogin($this->editUser);

    $edit = array(
      'title' => $this->randomName(8),
    );

    // Checks is event node form.
    $this->drupalPost('node/add/event-d4eu', $edit, t('Save'));
    $this->assertText(t('has been created.'), t('An event has been created.'));

    // Logs out.
    $this->drupalLogout();
  }

}
