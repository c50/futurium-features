<?php
/**
 * @file
 * Hic sunt dracones.
 */

function linker_permission(){
  $perms['administer linker'] = array(
    'title' => t('Administer Linker'),
    'description' => t('Perform administration tasks for my module.'),
  );
  $perms['use linker'] = array(
    'title' => t('Use Linker'),
    'description' => t('Use linker to connect nodes.'),
  );
  return $perms;
}

function linker_menu() {
  $items['admin/linker'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('linker_admin_form'),
    'access arguments' => array('administer linker'),
    'type' => MENU_CALLBACK
  );
  $items['node/linker/autocomplete'] = array(
    'page callback' => '_linker_node_autocomplete',
    'page arguments' => array(3),
    'access arguments' => array('use linker'),
    'type' => MENU_CALLBACK
  );
  $items['node/linker/autocomplete/%/%'] = array(
    'page callback' => '_linker_node_autocomplete',
    'page arguments' => array(3, 4, 5),
    'access arguments' => array('use linker'),
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Implements hook_block_info()
 */
function linker_block_info() {
  $blocks['linker'] = array(
    'info' => t('Linker'),
    'cache' => DRUPAL_NO_CACHE
  );
  return $blocks;
}

/**
 * Implements hook_block_view()
 */
function linker_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'linker':
      $node = menu_get_object();

      if (isset($node->nid) && user_access('use linker')) {

        $relss = relation_get_available_types('node', $node->type, 'source');
        $relst = relation_get_available_types('node', $node->type, 'target');
        $rels = array_merge($relss, $relst);
        if (!empty($rels)) {
          $block['subject'] = t('Linker');
          $form = drupal_get_form('linker_form');
          $block['content'] = drupal_render($form);
          $block['content'] .= '<div id="node-form-holder"><div class="inside"></div></div>';
        }
      }
      break;
  }
  return $block;
}


function linker_form($form, $form_state) {

  $direction = 'normal';
  $node = menu_get_object();

  $form['feedback'] = array(
    '#markup' => '<div id="linker-feedback"></div>',
  );

  $form['title'] = array(
    '#markup' => t("<em>@node_title</em> is:", array('@node_title' => $node->title)),
    '#prefix' => '<div class="linker-title">',
    '#suffix' => '</div>',
  );

  $form['link_origin'] = array(
    '#type' => 'hidden',
    '#value' => $node->nid,
  );

  $relss = relation_get_available_types('node', $node->type, 'source');
  $relst = relation_get_available_types('node', $node->type, 'target');
  $rels = array_merge($relss, $relst);

  foreach($rels as $k => $v) {
    $label = $v->label;
    // Non-directional relation.
    if ($v->directional) {
      if (in_array('node:' . $node->type, $v->target_bundles)){
        // Current $node is a target, use label.
        $label = $v->reverse_label;
      }
    }

    drupal_alter('linker_relation_label', $label, $form);

    $options[$v->relation_type] = t($label);
  }

  $form['current_content_type'] = array(
    '#type' => 'hidden',
    '#value' => $node->type,
  );

  // Set link type default.
  if (!isset($form_state['input']['link_type'])) {
    // @TODO: Allow picking default relation.
    $options = array_reverse($options);
    $keys = array_keys($options);
    $default = "";  //array_shift($keys);
  }
  else{
    $default = $form_state['input']['link_type'];
  }

  $form['link_type'] = array(
    '#type' => 'radios',
    '#options' => $options,
    '#default_value' => $default,
    '#ajax' => array(
      'event' => 'change',
      'callback' => "_linker_radio_changed",
      'wrapper' => 'search-box',
      'progress' => array(
        'message' => '',
        'type' => 'throbber',
      ),
    ),
    '#validated' => TRUE,
  );

  $form['search_box'] = array(
    '#type' => 'textfield',
    '#autocomplete_path' => 'node/linker/autocomplete/'. $default . '/' . $node->type,
    '#attributes' => array(
      'placeholder' => t('Search for content to link'),
    ),
    '#ajax' => array(
      'event' => 'autocompleteHidden',
      'callback' => "_linker_no_results",
    ),
    '#maxlength' => 255,
    '#prefix' => '<div id="search-box">',
    '#suffix' => '</div>',
  );

  $form['results'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'style' => 'display:none',
    ),
  );

  $form['results']['preview'] = array(
    '#type' => 'markup',
    '#markup' => '<label for="node-preview">Preview</label><div id="node-preview"></div>',
  );

  $form['results']['link'] = array(
    '#value' => "Link",
    '#type' => 'button',
    '#ajax' => array(
      'callback' => '_linker_link',
    ),
  );


/* Create new content */

  $form['no-results'] = array(
    '#type' => 'markup',
    '#prefix' => '<table class="new-content" style="width:100%; display:none;">',
    '#suffix' => '</table>',
  );

  $form['no-results']['wrap_start'] = array(
    '#type' => 'markup',
    '#markup' => '<tr><td class="no-result-wrapper" colspan="3" ><div class="no-result-label">Content "<span></span>" not found.</div></td></tr>',
  );

  $form['no-results']['evidence']['create_evidence'] = array(
    '#type' => 'link',
    '#title' => 'Create evidence',
    '#prefix' => '<td class="button-wrap new-evidence-button">',
    '#suffix' => '</td></tr>',
    '#href' => 'node/add/evidence-1-paragraphs',
    '#options' => array(
      'query' => array(
        'relation_type' => 'proven_by',
        'relation_link_to' => $node->nid,
      ),
    ),
  );

  // Get targets for related relationships
  //$targets =

  $form['no-results']['related']['type'] = array(
    '#field_prefix' => '<tr class="new-related"><td class="label-wrap new-related-label">Create new related content</td><td class="select-wrap new-related-select">',
    '#suffix' => '</td>',
  );

  $form['no-results']['related']['create_related'] = array(
    '#type' => 'button',
    '#value' => 'Create related content',
    '#prefix' => '<td class="button-wrap new-related-button">',
    '#suffix' => '</td></tr>',
    '#ajax' => array(
      'callback' => '_linker_add_content',
    ),
  );

  $form['#attached'] = array(
    'js' => array(
      drupal_get_path('module', 'linker') . '/linker.js' => array(
        'type' => 'file',
        'scope' => 'footer',
        'weight' => 100,
      ),
    ),
    'css' => array(
      drupal_get_path('module', 'linker') . '/linker.css',
    ),
  );

  return $form;
}

function _linker_no_results($form, $form_state) {
  $trigger = $form_state['triggering_element'];
  // Check for a valid result
  $result = _linker_parse_result($trigger['#value']);

  if ($result !== FALSE) {
    $n = node_load($result);
    $commands[] = ajax_command_invoke('#edit-results', 'fadeIn');
    $commands[] = ajax_command_invoke('.new-content', 'hide');
    $markup = node_view($n, 'teaser');
    $commands[] = ajax_command_replace('#node-preview', '<div id="node-preview">' . drupal_render($markup) . '</div>');
  }
  else {
    $content_label = $form_state['input']['search_box'];
    $commands[] = ajax_command_html('#linker-feedback', '');
    $commands[] = ajax_command_replace('.no-result-label span', '<span>' . $content_label . '</span>');

    $commands[] = ajax_command_invoke('#edit-results', 'hide');
    $commands[] = ajax_command_invoke('.new-content', 'fadeIn');

    if ($form_state['input']['link_type'] == 'proven_by') {
      $commands[] = ajax_command_invoke('.new-evidence', 'show');
      $commands[] = ajax_command_invoke('.new-related', 'hide');
    }
    else {
      $commands[] = ajax_command_invoke('.new-evidence', 'hide');
      $commands[] = ajax_command_invoke('.new-related', 'show');
    }
  }
  return array('#type' => 'ajax','#commands' => $commands);
}

/**
 * Callback for when radio changes.
 */
function _linker_radio_changed($form, &$form_state) {
  $trigger = $form_state['triggering_element'];
  $type = $trigger['#value'];
  unset($form_state['input']['search_box'], $form_state['values']['search_box']);
  $current_content_type = $form_state['input']['current_content_type'];
  $form['search_box']['#autocomplete_path'] = 'node/linker/autocomplete/' . $type . '/' . $current_content_type;
  $new_autocomplete = form_builder($form['#id'], $form['search_box'], $form_state);

  $commands[] = ajax_command_html('#linker-feedback', '');
  $commands[] = ajax_command_invoke('.new-content', 'hide');
  $commands[] = ajax_command_invoke('#edit-results', 'hide');
  $commands[] = ajax_command_invoke('#edit-no-results', 'hide');
  $commands[] = ajax_command_invoke('#edit-evidence', 'hide');
  $commands[] = ajax_command_invoke('#edit-related', 'hide');
  $commands[] = ajax_command_invoke('#edit-search-box', 'val', array(""));

  $commands[] = ajax_command_replace('.form-item-search-box', render($new_autocomplete));
  $commands[] = ajax_command_html('#linker-feedback', '<div class="temporary-messages">'. theme('status_messages') . '</div>');
  return array('#type' => 'ajax','#commands' => $commands);

}

/**
 * Callback for autocomplete box.
 * @param  string $relation_type Relation name
 * @param  string $string        Text to search
 * @return array $matches        JSON array containing matches
 */
function _linker_node_autocomplete($relation_type = NULL, $current_content_type = NULL, $string = "") {

  $matches = array();
  if ($string) {

    $all_types = TRUE;
    $relation = relation_type_load($relation_type);

    $label = $relation->label;
    // Non-directional relation.
    if ($relation->directional) {
      if (in_array('node:' . $current_content_type, $relation->target_bundles)){
        // Current $node is a target, use sources.
        foreach ($relation->source_bundles as $key => $value) {
          $types[] = str_replace('node:', '', $value);
        }
      }
      if (in_array('node:' . $current_content_type, $relation->source_bundles)){
        // Current $node is a source, use targets.
        foreach ($relation->target_bundles as $key => $value) {
          $types[] = str_replace('node:', '', $value);
        }
      }
    }
    // Directional relation.
    else{
      foreach ($relation->source_bundles as $key => $value) {
        $types[] = str_replace('node:', '', $value);
      }
    }

    if (!empty($types) && !in_array('*', $types)) {
      $all_types = FALSE;
    }

    $query = db_select('node', 'n');

    $query
      ->fields('n', array('title', 'nid'))
      ->condition('n.title', '%' . db_like($string) . '%', 'LIKE');

    if (!$all_types) {
      $query
        ->condition('n.type', $types, 'IN');
    }

    $query
      ->range(0, 10);

    $result = $query->execute();

    while($node = $result->fetchAssoc()) {
      $n = node_load($node['nid']);
      $classes = array('autocomplete-suggestion');
      $label = '<span';
      if (isset($n->workbench_moderation['current']->state)) {
        $classes[] = $n->workbench_moderation['current']->state;
      }
      $classes[] = 'node-type-' . $n->type;
      $label .= ' class="' . implode($classes, ' ') . '">';
      $label .= check_plain($node['title']);
      $label .= '</span>';

      $matches[$node['title'] . " [" . $node['nid'] . "]"] = $label;
    }
  }
  drupal_json_output($matches);
}

/**
 * Helper function to extract selected node from autocomplete field
 */
function _linker_parse_result($value){
  $result = preg_match('/\[([0-9]+)\]$/', $value, $matches);
  if ($result > 0) {
    $result = $matches[0];
    $result = str_replace('[', '', $result);
    $result = str_replace(']', '', $result);
    return $result;
  }
  return FALSE;
}

/**
 * Callback to create the link.
 */
function _linker_link($form, $form_state){

  $origin_nid = $form_state['input']['link_origin'];
  $target_nid = _linker_parse_result($form_state['input']['search_box']);
  $relation_type = $form_state['input']['link_type'];

  $result = _linker_link_nodes($origin_nid, $target_nid, $relation_type);

  $commands[] = ajax_command_invoke('.new-content', 'hide');
  $commands[] = ajax_command_invoke('#edit-results', 'hide');
  $commands[] = ajax_command_invoke('#edit-no-results', 'hide');
  $commands[] = ajax_command_invoke('#edit-evidence', 'hide');
  $commands[] = ajax_command_invoke('#edit-related', 'hide');
  $commands[] = ajax_command_invoke('#edit-search-box', 'val', array(""));

  drupal_set_message($result['message'], $result['type']);

  $commands[] = ajax_command_html('#linker-feedback', '<div class="temporary-messages">'. theme('status_messages') . '</div>');
  if ($result['fade']) {
    $commands[] = array('command' => 'fadeMessages');
  }

  return array('#type' => 'ajax','#commands' => $commands);
}


// UNDER DEV

function _linker_add_content($form, $form_state) {
  module_load_include('inc', 'node', 'node.pages');

  $form = node_add('ideas');
  $output = drupal_render($form);

  $commands[] = ajax_command_html('#node-form-holder .inside', $output);
  $commands[] = ajax_command_invoke('#node-form-holder', 'fadeIn');
  $commands[] = ajax_command_css('body', array('overflow-y' => 'hidden'));

  return array('#type' => 'ajax','#commands' => $commands);
}

function _linker_delete_link($ajax, $nid, $field, $index) {
  $entity = entity_load_single('node', $nid);
  $deleted_nid = $entity->{$field}[LANGUAGE_NONE][$index]['target_id'];
  $deleted_node = node_load($deleted_nid);

  unset($entity->{$field}[LANGUAGE_NONE][$index]);
  $entity->{$field}[LANGUAGE_NONE] = array_values($entity->{$field}[LANGUAGE_NONE]);

  field_attach_presave('node', $entity);
  field_attach_update('node', $entity);

  $is_ajax = $ajax === 'ajax';

  $message = 'Deleted link to <em>' . $deleted_node->title . '</em>';
  $message_type = 'status';

  drupal_set_message($message, $message_type);

  if($is_ajax) {
    global $base_url;

    $entity->{$field}[LANGUAGE_NONE];

    $count = count($entity->{$field}[LANGUAGE_NONE]);
    $css_selector = str_replace('_', '-', $field);

    $selector = $count == 0
      ? '#node-' . $nid . ' ' . '.group-related-content .field-name-' . $css_selector
      : '#node-' . $nid . ' ' . '.group-related-content [delete-nid=' . $deleted_nid . ']';

    $commands[] = ajax_command_remove($selector);

    $commands[] = ajax_command_invoke('.new-content', 'hide');
    $commands[] = ajax_command_invoke('#edit-results', 'hide');
    $commands[] = ajax_command_invoke('#edit-no-results', 'hide');
    $commands[] = ajax_command_invoke('#edit-evidence', 'hide');
    $commands[] = ajax_command_invoke('#edit-related', 'hide');
    $commands[] = ajax_command_invoke('#edit-search-box', 'val', array(""));

    $commands[] = ajax_command_html('#linker-feedback', '<div class="temporary-messages">'. theme_status_messages(array()) . '</div>');
    $commands[] = array('command' => 'fadeMessages');

    print ajax_render($commands);
    exit;
  }
  else{
    drupal_goto('node/' . $nid);
  }
}


function _linker_link_nodes($nid1, $nid2, $relation_type) {
  if ($nid1 == $nid2) {
    return array(
      'message' => t('Creating relation failed. Cannot link entity with itself.'),
      'type' => 'error',
      'fade' => TRUE,
    );
  }
  $origin_nid = $nid1;
  $target_nid = $nid2;

  $o_n = node_load($origin_nid);
  $t_n = node_load($target_nid);

  $relation = relation_type_load($relation_type);

  // Directional relation.
  if ($relation->directional) {
    if (in_array('node:' . $o_n->type, $relation->target_bundles)){
      $reverse = TRUE;
    }
  }

  $endpoints = array(
    array('entity_type' => 'node', 'entity_id' => $o_n->nid),
    array('entity_type' => 'node', 'entity_id' => $t_n->nid),
  );

  if($reverse){
    $endpoints = array_reverse($endpoints);
  }

  $results = relation_relation_exists($endpoints, $relation_type);

  if (empty($results)) {
    $new_relation = relation_create($relation_type, $endpoints);
    $rid = relation_save($new_relation);

    $relation_label = $reverse ? $relation->reverse_label : $relation->label;

    if ($rid) {
      $vars = array(
        '@origin_node' => $o_n->title,
        '@origin_type' => $o_n->type,
        '@target_node' => $t_n->title,
        '@target_type' => $o_n->type,
        '@relation_label' => strtolower($relation_label),
      );

      $message = t('Relation created: @origin_node is <em>@relation_label</em> @target_node', $vars);
      $message_type = 'status';
      $fade = TRUE;
    }
    else {
      $message = t('Creating relationship failed.');
      $message_type = 'error';
      $fade = FALSE;
    }
  }
  else{
    $existing = array_shift($results);
    $message = t('Relationship already exists.');
    $message_type = 'warning';
    $fade = TRUE;
  }

  return array(
    'message' => $message,
    'type' => $message_type,
    'fade' => $fade,
  );
}
