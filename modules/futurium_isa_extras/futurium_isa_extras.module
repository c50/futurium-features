<?php
/**
 * @file
 * Hic sunt dracones.
 */

/**
 * Implements hook_enable().
 */
function futurium_isa_extras_enable() {
  // Site default settings.
  variable_set('site_frontpage', 'home');
  variable_set('user_pictures', '1');
  variable_set('user_picture_default', '');
  variable_set('user_picture_dimensions', '85x85');
  variable_set('user_picture_file_size', '30');
  variable_set('user_picture_guidelines', '');
  variable_set('user_picture_path', '');
  variable_set('user_picture_style', '');
  variable_set('user_register', '2');

  // Theme settings.
  _bootstrap_default_settings();

  // Add H1 tags to allowed tags.
  $allowed_tags = variable_get('security_allowed_tags', "");
  if (!empty($allowed_tags)) {
    $allowed_tags .= 'h1';
    variable_set('security_allowed_tags', $allowed_tags);
  }

  // Temporary, grants anonymous the right to see/edit every node.
  //$drupal_role = user_role_load_by_name('anonymous user');
  //user_role_change_permissions($drupal_role->rid, array('bypass node access' => TRUE));

  // Set default user picture.
  futurium_isa_extras_set_default_pic();

  drupal_flush_all_caches();
}

/**
 * Implements hook_admin_paths_alter().
 */
function futurium_isa_extras_admin_paths_alter(&$paths) {
  $paths['user/*/edit'] = FALSE;
}

/**
 * Implements hook_preprocess_node().
 */
function futurium_isa_extras_preprocess_node(&$vars) {
  $vars['classes_array'][] = "view-mode-" . $vars['view_mode'];
  $vars['display_submitted'] = FALSE;
}

/**
 * Implements hook_menu_alter().
 */
function futurium_isa_extras_menu_alter(&$items) {
  $items['search/site']['menu_name'] = 'navigation';
  $items['user']['weight'] = 10000;
  $items['user']['menu_name'] = 'main-menu';
  $items['user/login']['weight'] = 10001;
  $items['user/login']['menu_name'] = 'main-menu';
}

/**
 * Helper to set default theme settings.
 */
function _bootstrap_default_settings() {

  $settings = array(
    'toggle_logo' => 0,
    'toggle_name' => 1,
    'toggle_slogan' => 1,
    'toggle_node_user_picture' => 0,
    'toggle_comment_user_picture' => 0,
    'toggle_comment_user_verification' => 0,
    'toggle_favicon' => 1,
    'toggle_main_menu' => 1,
    'toggle_secondary_menu' => 0,
    'default_logo' => 1,
    'logo_path' => "",
    'logo_upload' => "",
    'default_favicon' => 1,
    'favicon_path' => "",
    'favicon_upload' => "",
    'general__active_tab' => "edit-theme-settings",
    'bootstrap__active_tab' => "edit-javascript",
    'bootstrap_breadcrumb' => "1",
    'bootstrap_breadcrumb_home' => 0,
    'bootstrap_breadcrumb_title' => 1,
    'bootstrap_navbar_position' => "",
    'bootstrap_navbar_inverse' => 0,
    'bootstrap_region_well-navigation' => "",
    'bootstrap_region_well-header' => "",
    'bootstrap_region_well-highlighted' => "",
    'bootstrap_region_well-help' => "",
    'bootstrap_region_well-content_slider' => "",
    'bootstrap_region_well-content_top' => "",
    'bootstrap_region_well-content_before_middle' => "",
    'bootstrap_region_well-content_before' => "",
    'bootstrap_region_well-content' => "",
    'bootstrap_region_well-content_after' => "",
    'bootstrap_region_well-content_after_middle' => "",
    'bootstrap_region_well-content_bottom' => "",
    'bootstrap_region_well-sidebar_first' => "well",
    'bootstrap_region_well-sidebar_second' => "",
    'bootstrap_region_well-footer' => "",
    'bootstrap_region_well-page_top' => "",
    'bootstrap_region_well-page_bottom' => "",
    'bootstrap_anchors_fix' => 1,
    'bootstrap_anchors_smooth_scrolling' => 1,
    'bootstrap_popover_enabled' => 1,
    'bootstrap_popover_animation' => 1,
    'bootstrap_popover_html' => 0,
    'bootstrap_popover_placement' => "right",
    'bootstrap_popover_selector' => "",
    'bootstrap_popover_trigger' => array(
      'click' => "click",
      'hover' => 0,
      'focus' => 0,
      'manual' => 0,
    ),
    'bootstrap_popover_title' => "",
    'bootstrap_popover_content' => "",
    'bootstrap_popover_delay' => "0",
    'bootstrap_popover_container' => "body",
    'bootstrap_tooltip_enabled' => 1,
    'bootstrap_tooltip_descriptions' => 1,
    'bootstrap_tooltip_animation' => 1,
    'bootstrap_tooltip_html' => 0,
    'bootstrap_tooltip_placement' => "auto left",
    'bootstrap_tooltip_selector' => "",
    'bootstrap_tooltip_trigger' => array(
      'click' => "click",
      'hover' => 0,
      'focus' => 0,
      'manual' => 0,
    ),
    'bootstrap_tooltip_delay' => "0",
    'bootstrap_tooltip_container' => "body",
    'bootstrap_cdn' => "3.0.2",
    'bootstrap_bootswatch' => "",
    'bootstrap_rebuild_registry' => 0,
    'bootstrap_toggle_jquery_error' => 0,
    'jquery_update_jquery_version' => "",
  );

  theme_disable(array('bartik', 'ec_resp'));

  $enable = array(
    'theme_default' => 'futurium_isa_theme',
    'admin_theme' => 'seven',
  );
  theme_enable($enable);

  foreach ($enable as $var => $theme) {
    if (!is_numeric($var)) {
      variable_set($var, $theme);
    }
  }

  variable_set('theme_futurium_isa_theme_settings', $settings);
}

/**
 * Implements hook_block_info().
 */
function futurium_isa_extras_block_info() {
  $blocks['node_authors'] = array(
    'info' => t('Node Authors'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['node_social_share'] = array(
    'info' => t('Node Share'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function futurium_isa_extras_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'node_social_share':

      $variables = array(
        'items' => array(),
        'title' => NULL,
        'type' => 'ul',
        'attributes' => array('class' => array('share-links', 'list-inline')),
      );

      $url = urlencode(url(current_path(), array('absolute' => TRUE)));

      $class = 'facebook';
      $l_options = array('attributes' => array('class' => $class));
      $variables['items'][] = array(
        'data' => l(t("Facebook"), "https://www.facebook.com/sharer/sharer.php?u=" . $url, $l_options),
        'class' => array($class),
      );

      $class = 'twitter';
      $l_options = array('attributes' => array('class' => $class));
      $variables['items'][] = array(
        'data' => l(t("Twitter"), "https://twitter.com/home?status=" . $url, $l_options),
        'class' => array($class),
      );

      $class = 'google-plus';
      $l_options = array('attributes' => array('class' => $class));
      $variables['items'][] = array(
        'data' => l(t("Google Plus"), "https://plus.google.com/share?url=" . $url, $l_options),
        'class' => array($class),
      );

      $block['content'] = theme('item_list', $variables);
      break;
  }
  return $block;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function futurium_isa_extras_ctools_plugin_directory($module, $plugin) {
  if ($module == "panels" && in_array($plugin, array('layouts', 'styles'))) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function futurium_isa_extras_field_extra_fields() {
  foreach (array('future', 'ideas', 'event_d4eu') as $node_type) {
    // Flaggings (Like & Attending).
    switch ($node_type) {
      case 'ideas':
      case 'future':
        $extrafield_name = 'like';
        break;

      case 'event_d4eu':
        $extrafield_name = 'attending';
        break;
    }

    $flag = flag_get_flag($extrafield_name);
    if (isset($flag) && $flag) {
      $extra['node'][$node_type]['display'][$extrafield_name] = array(
        'label' => t("@flag_title counter", array('@flag_title' => $flag->title)),
        'description' => t('@flag_name counter.', array('@flag_name' => $flag->name)),
        'weight' => 50,
      );
    }

    // Comment count.
    $extrafield_name = 'comment_count';
    $extra['node'][$node_type]['display'][$extrafield_name] = array(
      'label' => t("Comment count"),
      'description' => t('Node comments count'),
      'weight' => 51,
    );
  }

  // Edit profile link.
  $extrafield_name = 'edit_group';
  $extra['node']['futurium_group']['display'][$extrafield_name] = array(
    'label' => t("Edit Group"),
    'description' => t('Edit group.'),
    'weight' => 52,
  );

  // City only.
  $extrafield_name = 'addressfield_city';
  $extra['node']['event_d4eu']['display'][$extrafield_name] = array(
    'label' => t("Addressfield City"),
    'description' => t('Address field city only.'),
    'weight' => 52,
  );

  // Follow flag.
  $extrafield_name = 'follow';
  $extra['user']['user']['display'][$extrafield_name] = array(
    'label' => t("Follow"),
    'description' => t('Follow user.'),
    'weight' => 51,
  );

  // Edit profile link.
  $extrafield_name = 'edit';
  $extra['user']['user']['display'][$extrafield_name] = array(
    'label' => t("Edit"),
    'description' => t('Edit account.'),
    'weight' => 52,
  );

  return $extra;
}

/**
 * Implements hook_node_view().
 */
function futurium_isa_extras_node_view($node, $view_mode, $langcode) {

  $extrafields = field_extra_fields_get_display('node', $node->type, $view_mode);

  // Likes.
  $extrafield_name = 'like';
  if (isset($extrafields[$extrafield_name])
      && isset($extrafields[$extrafield_name]['visible'])
      && $extrafields[$extrafield_name]['visible']) {

    $flag = flag_get_flag($extrafield_name);
    $count = $flag->get_count($node->nid);
    $plural = format_plural($count, t('Like'), t('Likes'));
    $node->content[$extrafield_name] = array('#markup' => '<div class="field fake-field like-count">' . $count . ' ' . $plural . '</div>');
  }

  // Attending.
  $extrafield_name = 'attending';
  if (isset($extrafields[$extrafield_name])
      && isset($extrafields[$extrafield_name]['visible'])
      && $extrafields[$extrafield_name]['visible']) {

    $flag = flag_get_flag($extrafield_name);
    $count = $flag->get_count($node->nid);
    $label = t('Going');
    $node->content[$extrafield_name] = array(
      '#markup' => '<div class="field fake-field attending-count">' . $count . ' ' . $label . '</div>',
    );
  }

  // Comment count.
  $extrafield_name = 'comment_count';
  if (isset($extrafields[$extrafield_name])
      && isset($extrafields[$extrafield_name]['visible'])
      && $extrafields[$extrafield_name]['visible']) {
    $count = $node->comment_count;
    $node->content[$extrafield_name] = array(
      '#markup' => '<div class="field fake-field comment-count">' . $count . ' ' . format_plural($count, t('Comment'), t('Comments')) . '</div>',
    );
  }

  // Addressfield city only.
  $extrafield_name = 'addressfield_city';
  if (isset($extrafields[$extrafield_name])
      && isset($extrafields[$extrafield_name]['visible'])
      && $extrafields[$extrafield_name]['visible']) {
    $location = $node->field_location[LANGUAGE_NONE][0];
    if (!empty($location)) {
      $city = ucwords($location['locality']);
      $node->content[$extrafield_name] = array(
        '#markup' => '<div class="field fake-field location-city">' . $city . '</div>',
      );
    }
  }

  // Edit group.
  $extrafield_name = 'edit_group';
  if (isset($extrafields[$extrafield_name])
      && isset($extrafields[$extrafield_name]['visible'])
      && $extrafields[$extrafield_name]['visible']) {

    //global $user;
    //if ($user->uid == $account->uid || user_access('administer users')) {
      $link_options = array(
        'attributes' => array(
          'class' => array(
            'flag',
            'flag-action',
            'flag-link-toggle',
            'flag-processed',
          ),
        ),
      );
      $node->content[$extrafield_name] = array(
        '#markup' => l(t("Edit group profile"), 'node/' . $node->nid . '/edit', $link_options),
      );
    //}
  }

}

/**
 * Implements hook_user_view().
 */
function futurium_isa_extras_user_view($account, $view_mode, $langcode) {

  $extrafields = field_extra_fields_get_display('user', 'user', $view_mode);

  // Follow.
  $extrafield_name = 'follow';
  if (isset($extrafields[$extrafield_name])
      && isset($extrafields[$extrafield_name]['visible'])
      && $extrafields[$extrafield_name]['visible']) {

    $flag = flag_get_flag($extrafield_name);
    $account->content[$extrafield_name] = array('#markup' => flag_create_link('follow_user', $account->uid));
  }

  // Edit.
  $extrafield_name = 'edit';
  if (isset($extrafields[$extrafield_name])
      && isset($extrafields[$extrafield_name]['visible'])
      && $extrafields[$extrafield_name]['visible']) {

    global $user;
    if ($user->uid == $account->uid || user_access('administer users')) {
      $link_options = array(
        'attributes' => array(
          'class' => array(
            'flag',
            'flag-action',
            'flag-link-toggle',
            'flag-processed',
          ),
        ),
      );
      $account->content[$extrafield_name] = array(
        '#markup' => l(t("Edit profile"), 'user/' . $account->uid . '/edit', $link_options),
      );
    }
  }

}

/**
 * Implements hook_ds_fields_info().
 */
function futurium_isa_extras_ds_fields_info($entity_type) {
  $fields = array();

  $fields['comment']['author'] = array(
    'title' => t('Author'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => 'futurium_isa_extras_ds_field_author',
  );

  $fields['node']['member_count'] = array(
    'title' => t('Member count'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => 'futurium_isa_extras_ds_field_member_count',
    'ui_limit' => array('futurium_group|teaser', 'futurium_group|node_header'),
  );

  $fields['node']['futures_count'] = array(
    'title' => t('Futures count'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => 'futurium_isa_extras_ds_field_futures_count',
    'ui_limit' => array('futurium_group|teaser', 'futurium_group|node_header'),
  );

  $fields['node']['ideas_count'] = array(
    'title' => t('Ideas count'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => 'futurium_isa_extras_ds_field_ideas_count',
    'ui_limit' => array('futurium_group|teaser', 'futurium_group|node_header'),
  );

  if (isset($fields[$entity_type])) {
    return array($entity_type => $fields[$entity_type]);
  }
}

/**
 * Render the node author field.
 */
function futurium_isa_extras_ds_field_author($field) {
  $uid = $field['entity']->uid;
  $account = user_load($uid);
  $content = theme('username', array('account' => $account));
  return $content;
}

/**
 * Render the group member count field.
 */
function futurium_isa_extras_ds_field_member_count($field) {
  $nid = $field['entity']->nid;
  $count = '<div class="field fake-field member-count">' . futurium_isa_extras_count_group_members($nid) . '</div>';
  return render($count);
}

/**
 * Render the group member count field.
 */
function futurium_isa_extras_ds_field_futures_count($field) {
  $nid = $field['entity']->nid;
  $count = '<div class="field fake-field futures-count">' . futurium_isa_extras_count_group_content($nid, 'future') . '</div>';
  return render($count);
}

/**
 * Render the group member count field.
 */
function futurium_isa_extras_ds_field_ideas_count($field) {
  $nid = $field['entity']->nid;
  $count = '<div class="field fake-field ideas-count">' . futurium_isa_extras_count_group_content($nid, 'ideas') . '</div>';
  return render($count);
}

/**
 * Helper function to set default user picture.
 */
function futurium_isa_extras_set_default_pic() {
  $module_path = drupal_get_path('module', 'futurium_isa_extras');
  $full_path = $module_path . '/default_images/user_picture.png';

  $source = drupal_realpath($full_path);

  file_unmanaged_copy($source);
  variable_set('user_picture_default', 'public://user_picture.png');
}

/**
 * Helper function to count group members.
 */
function futurium_isa_extras_count_group_members($nid) {

  $group_type = 'node';
  $group = entity_load_single($group_type, $nid);

  if (!$group || !og_is_group($group_type, $group)) {
    // Arguments are not a valid group.
    return;
  }

  $items = array();

  $base_query = new EntityFieldQuery();
  $base_query
    ->entityCondition('entity_type', 'og_membership')
    ->propertyCondition('group_type', $group_type, '=')
    ->propertyCondition('gid', $nid, '=')
    ->count();

  $query = clone $base_query;
  $count = $query
    ->propertyCondition('entity_type', 'user', '=')
    ->execute();

  return $count;

}

/**
 * Helper function to count group content.
 */
function futurium_isa_extras_count_group_content($nid, $content_type) {

  $group_type = 'node';
  $group = entity_load_single($group_type, $nid);

  if (!$group || !og_is_group($group_type, $group)) {
    // Arguments are not a valid group.
    return;
  }

  $items = array();

  $base_query = new EntityFieldQuery();
  $base_query
    ->entityCondition('entity_type', 'og_membership')
    ->propertyCondition('group_type', $group_type, '=')
    ->propertyCondition('gid', $nid, '=')
  ;

  $query = clone $base_query;
  $count = $query
    ->propertyCondition('entity_type', 'node', '=')
    ->execute();

  $sub_query = db_select('node')
    ->fields('node', array('nid'))
    ->condition('type', $content_type, '=');

  $query = db_select('og_membership')
    ->fields('og_membership', array('etid'))
    ->condition('group_type', 'node', '=')
    ->condition('gid', $nid, '=')
    ->condition('etid', $sub_query, 'IN');

  $results = $query->execute()->fetchAll();

  return count($results);
}

// Modules likely to be disabled
/*
Bootstrap - Photo Gallery
Dashboard
Devel generate
Feature Set
JS injector
Language selector (Page)
Language selector (Site)
Multisite autosave
Multisite Create Button
Multisite custom error
Multisite Dynamic Base theme
Multisite_Rules_Configuration
NextEuropa Editorial
NextEuropa Multilingual
NextEuropa Pages
NextEuropa Pages feature.
solr_config
TagClouds
Testing
Workbench Moderation View for multisite
 */
